//Header file for CellInterface elements
#ifndef OOMPH_DIFF_AUGMENTED_CELL_SOLVERS_ELEMENTS_HEADER
#define OOMPH_DIFF_AUGMENTED_CELL_SOLVERS_ELEMENTS_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
	#include <oomph-lib-config.h>
#endif

#include "cell_solvers_fully_partitioned.h"

#include "../toms_utilities/diff_augmented_cell_wrapper.h"


namespace oomph
{
	//Monodomain
	template<unsigned DIM>
	class DiffAugmentedCell<MonodomainEquations<DIM>>:
		public virtual MonodomainEquations<DIM>
	{
		//Overwrite the get diff function to take it instead from the values stored in the diffusion augmentation wrapper
		inline void get_diff_monodomain(const unsigned& ipt,
	                                            const Vector<double> &s,
	                                            const Vector<double>& x,
	                                            DenseMatrix<double>& D) const
		{
			DiffAugmentedCell<MonodomainEquations<DIM>>::get_interpolated_diffusion_matrix(s, D);
		}
	};


	//Monodomain, implicit simpsons-cubic hermite spline method
	template<unsigned DIM>
	class DiffAugmentedCell<MonodomainEquationsSimpsonsApproximation<DIM>>:
		public virtual MonodomainEquationsSimpsonsApproximation<DIM>
	{
		//Overwrite the get diff function to take it instead from the values stored in the diffusion augmentation wrapper
		inline void get_diff_monodomain(const unsigned& ipt,
	                                            const Vector<double> &s,
	                                            const Vector<double>& x,
	                                            DenseMatrix<double>& D) const
		{
			DiffAugmentedCell<MonodomainEquationsSimpsonsApproximation<DIM>>::get_interpolated_diffusion_matrix(s, D);
		}
	};


	//Monodomain implicit Crank-Nicolson method
	template<unsigned DIM>
	class DiffAugmentedCell<MonodomainEquationsStrangSplitting<DIM>>:
		public virtual MonodomainEquationsStrangSplitting<DIM>
	{
		//Overwrite the get diff function to take it instead from the values stored in the diffusion augmentation wrapper
		inline void get_diff_monodomain(const unsigned& ipt,
	                                            const Vector<double> &s,
	                                            const Vector<double>& x,
	                                            DenseMatrix<double>& D) const
		{
			DiffAugmentedCell<MonodomainEquationsStrangSplitting<DIM>>::get_interpolated_diffusion_matrix(s, D);
		}
	};


	//Bidomain, we have to overwrite an additional function for the extracellular diffusion tensor


}


#endif