#ifndef OOMPH_TOMS_POINT_MESH_HEADER
#define OOMPH_TOMS_POINT_MESH_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif

#ifdef OOMPH_HAS_MPI
#include "mpi.h"
#endif

#include "../generic/Vector.h"
#include "../generic/nodes.h"
#include "../generic/matrices.h"
#include "../generic/mesh.h"

namespace oomph{

	template<class ELEMENT>
	class PointMesh : public virtual Mesh
	{
	public:
		PointMesh(TimeStepper* time_stepper_pt=&Mesh::Default_TimeStepper);

		PointMesh(const PointMesh& node)
		{
			BrokenCopy::broken_copy("PointMesh");
		}

		void operator=(const PointMesh&)
		{
			BrokenCopy::broken_assign("PointMesh");
		}

		virtual ~PointMesh() {}

		void setup_boundary_element_info()
		{
			std::ofstream outfile;
			setup_boundary_element_info(outfile);
		}

		void setup_boundary_element_info(std::ostream &outfile);

	protected:

		void check_point() const
		{
		#ifdef PARANOID	
			PointElement* el_pt = new ELEMENT;
			if(el_pt == nullptr){
				std::string err = "PointMesh is only for Point elements";
				throw OomphLibError(err, OOMPH_CURRENT_FUNCTION, OOMPH_EXCEPTION_LOCATION);
			}
			delete el_pt; el_pt = 0;
		#endif
		}

	};
}

#endif