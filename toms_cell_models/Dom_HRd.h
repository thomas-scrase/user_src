#ifndef OOMPH_DOM_HRD_CELL_HEADER
#define OOMPH_DOM_HRD_CELL_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif

#include "../cell_models/cell_model_base.h"

namespace oomph
{
	#define DSP_IC50_ikr 14.4 //Yasuda WT
	#define DSP_nH_ikr 1.0//0.91

	#define DSP_IC50_ikr_MWT 10.66 //McPate WT
	#define DSP_nH_ikr_MWT 1.0//1.07

	#define DSP_IC50_ikr_MN5 15.77 //McPate N588K
	#define DSP_nH_ikr_MN5 1.0//0.63

	#define DSP_IC50_ikr_AWT 7.68 //El Harchi WT
	#define DSP_nH_ikr_AWT 1.0//0.87

	#define DSP_IC50_ikr_AT6 16.83 //El Harchi T618I
	#define DSP_nH_ikr_AT6 1.0//0.47

	// #define DSP_IC50_ina 168.4 //Yasuda
	// #define DSP_nH_ina 1.09

	#define DSP_IC50_ina 28.0 //Yatani
	#define DSP_nH_ina 1.0

	#define DSP_IC50_ical 1036.7 //Yasuda
	#define DSP_nH_ical 1.0

	// #define DSP_IC50_ito 259 //Sanchez-Chapula 
	// #define DSP_nH_ito 1.07

	// #define DSP_IC50_ito 14.1 //Virag
	// #define DSP_nH_ito 1.0

	#define DSP_IC50_ito 20.9 //Hanada
	#define DSP_nH_ito 1.0

	#define DSP_IC50_iks 81.1 //Satoh
	#define DSP_nH_iks 1.0//3.10

	#define QND_IC50_ikr 0.6377 //Okada WT
	#define QND_nH_ikr 1.0//1.012

	#define QND_IC50_ikr_MWT 0.62 //McPate WT
	#define QND_nH_ikr_MWT 1.0//0.93

	#define QND_IC50_ikr_MN5 2.16 //McPate N588K
	#define QND_nH_ikr_MN5 1.0//0.92

	#define QND_IC50_ina 24.79 //Okada
	#define QND_nH_ina 1.0//1.3

	// #define QND_IC50_ina 14.6 //Yasuda
	// #define QND_nH_ina 1.22

	// #define QND_IC50_ical 7.731 //Okada
	// #define QND_nH_ical 0.8233

	// #define QND_IC50_ical 6.4 //Yasuda
	// #define QND_nH_ical 0.68

	#define QND_IC50_ical 14.9 //Zhang
	#define QND_nH_ical 1.0//1.1

	// #define QND_IC50_iks 73.33 //Okada
	// #define QND_nH_iks 1.336

	#define QND_IC50_iks 44.0 //Kang
	#define QND_nH_iks 1.0//1.86

	// #define QND_IC50_ito 1.906 //Okada
	// #define QND_nH_ito 1.198

	// #define QND_IC50_ito 17.6 //Hirota
	// #define QND_nH_ito 1.0

	#define QND_IC50_ito 21.8 //Nenov
	#define QND_nH_ito 1.0//0.67

	// #define QND_IC50_ik1 57.0 //Noujaim
	// #define QND_nH_ik1 1.0

	#define QND_IC50_ik1 42.6 //Nenov
	#define QND_nH_ik1 1.0//0.25

	#define QND_IC50_inal 12.0 //Wu
	#define QND_nH_inal 1.0


	class DomHRd : public CellModelBaseFullySegregated
	{
	public:
		//===========
		// Cell types
		//===========
		enum TypeCell { RVEPI, RVMCELL, RVENDO, LVEPI, LVMCELL, LVENDO };
		enum MutantType { WT, WTN588K, WTN588K_SM, N588K, WTT618I, T618I, hERGblock, NONE } ;

		void set_cell_type(const unsigned &c)
		{
			if( (c == RVEPI) || (c == RVMCELL) || (c == RVENDO) || (c == LVEPI) || (c == LVMCELL) || (c == LVENDO) )
			{
				m_celltype = c;
			}
			else
			{
				throw OomphLibError("Cell type is not compatible with cell model",
						OOMPH_CURRENT_FUNCTION,
						OOMPH_EXCEPTION_LOCATION);
			}
		}

		std::string get_cell_model_name(){return "DomHRd";}


		DomHRd(const unsigned& number_of_backup_values) : CellModelBaseFullySegregated(number_of_backup_values)
		{	
			//========================
      // Electrophysiology Model
      //========================
      // CL			= 1000;//pacing cycle length
			// dia			= CL;//5000;
			// repeats		= 10;
			// ft			= repeats*CL + dia;//final time
			// skip		= 10;//number of timesteps to skip in sampling of data in output file
			// safetime	= 25.0;//time from the beginning of each beat during which dt is fixed to small values
			// beatssave	= 10;//number of beats to save in the output
	        
			// amp			= purkinje_amplitude; //-80;//stimulus amplitude in uA/uF
			// start		= purkinje_stim_begin; //0;//start time of the stimulus, relative to each beat
			// duration	= purkinje_stim_length; //0.5;//duration of the stimulus in ms
			// tend		= start+duration;
			// beat_counter= 1;
			// APD30_double = false;
	        
			m_mutant = WT;
			m_ISO = false;
			m_DISO = 0.0;
			m_QNDN = 0.0;

			gkr = 1.0;//_gkr;
			gks = 1.0;//_gks;
			gcal = 1.0;//_gcal;

			

			//constants
			nao=140.0;//extracellular sodium in mM //
			cao=1.8;//extracellular calcium in mM //
			ko=5.4;//extracellular potassium in mM //
	        
			//buffer paramaters
			BSRmax=0.047; //
			KmBSR=0.00087; //
			BSLmax=1.124; //
			KmBSL=0.0087; //
			cmdnmax=0.05; //
			kmcmdn=0.00238; //
			trpnmax=0.07; //
			kmtrpn=0.0005; //
			csqnmax=10.0; //
			kmcsqn=0.8; //
	        
			//CaMK paramaters
			aCaMK=0.05;//
			bCaMK=0.00068; //
			CaMKo=0.05; //
			KmCaM=0.0015; //
			KmCaMK=0.15; //
	        
			//physical constants
			R=8314.0; //
			T=310.0; //
			F=96485.0; //
	        
			//cell geometry
			L=0.01; //
			rad=0.0011; //
			vcell=1000*3.14*rad*rad*L; //
				
			Ageo=2*3.14*rad*rad+2*3.14*rad*L; //
			Acap=2*Ageo; //
				
			vmyo=0.68*vcell; //
			vmito=0.26*vcell; //
			vsr=0.06*vcell; //
			vnsr=0.0552*vcell; //
			vjsr=0.0048*vcell; //
			vss=0.02*vcell; //
	        
			//introduce APD, timing, and counting parameters
			// dt=time_step;//0.05;//0.005;
			// t0=0;
			// t=0;
			// p=1;
			// n=0;
			// count=1;
			// APD_flag=0;
			// vo=v;
			// vdot=0;

			if ( m_ISO ) {

				value_1 = 1;// - exp(-time_1 / 7700);
				value_2 = 1;// - exp(-time_1 / 39700);

				INah_half = INa_CaMh_half = value_1 * 1.0;
				GNa_ISO =   1.0 + value_1 * 1.7;
				ICaLd_half = value_1 * 5.65; // 
				Tau_ICaL_ff_ISO = 1-value_1*0.5;
				ICaLf_half = value_1 * 2.0; //ref 1
				Pca_ISO =  1.0 + value_1 * 0.64;

				GKs_ISO = 1.0 + value_2 * 2.2;
				Tau_Ks = 1.0 - value_2 * 0.4; // 1/1.2 -> 0.6    // in the paper says: http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3311457/
				IKs_ac_shift_ISO = 7.0 * value_2;

				NaK_ISO = 1 - value_1 * 0.3; //
				GKb_ISO = 1 + value_1 * 2.62; // ref 2 3.62 and ref 1 2.5
				A_rel_ISO = 1 + value_1 * 0.8; // ref 2
				tau_rel_ISO = 1 - value_1 * 0.6; // ref 2
				Jup_ISO = 1 - value_1 * 0.46;
				kmtrpn_ISO = 1.0 + value_1 * 0.6;

			} else {

				INah_half = INa_CaMh_half = 0.0;
				GNa_ISO = 1.0;
				ICaLd_half = 0.0;
				ICaLf_half = 0.0;
				Tau_ICaL_ff_ISO = 1.0;
				Pca_ISO = 1.0;
				GKs_ISO = 1.0;
				Tau_Ks = 1.0;
				NaK_ISO = 1.0;//
				GKb_ISO = 1.0;
				A_rel_ISO = 1.0;   // ref 2
				tau_rel_ISO = 1.0;  // ref 2
				Jup_ISO = 1.0;
				kmtrpn_ISO = 1.0;
				IKs_ac_shift_ISO = 0.0;

			}


			//Disopyramide
			fKr = (1/(1+pow(10,((log10(DSP_IC50_ikr)-log10(m_DISO))*DSP_nH_ikr))));
			fKr_WT = (1/(1+pow(10,((log10(DSP_IC50_ikr_MWT)-log10(m_DISO))*DSP_nH_ikr_MWT))));
			fKr_N588K = (1/(1+pow(10,((log10(DSP_IC50_ikr_MN5)-log10(m_DISO))*DSP_nH_ikr_MN5))));
			fKr_AWT = (1/(1+pow(10,((log10(DSP_IC50_ikr_AWT)-log10(m_DISO))*DSP_nH_ikr_AWT))));
			fKr_T618I = (1/(1+pow(10,((log10(DSP_IC50_ikr_AT6)-log10(m_DISO))*DSP_nH_ikr_AT6))));
			fNa = (1/(1+pow(10,((log10(DSP_IC50_ina)-log10(m_DISO))*DSP_nH_ina))));
			fCaL = (1/(1+pow(10,((log10(DSP_IC50_ical)-log10(m_DISO))*DSP_nH_ical))));
			fTo = (1/(1+pow(10,((log10(DSP_IC50_ito)-log10(m_DISO))*DSP_nH_ito))));
			fKs = 0.0;//(1/(1+pow(10,((log10(DSP_IC50_iks)-log10(m_DISO))*DSP_nH_iks))));

			//Quinidine
			qKr = (1/(1+pow(10,((log10(QND_IC50_ikr)-log10(m_QNDN))*QND_nH_ikr))));
			qKr_WT = (1/(1+pow(10,((log10(QND_IC50_ikr_MWT)-log10(m_QNDN))*QND_nH_ikr_MWT))));
			qKr_N588K = (1/(1+pow(10,((log10(QND_IC50_ikr_MN5)-log10(m_QNDN))*QND_nH_ikr_MN5))));
			qNa = (1/(1+pow(10,((log10(QND_IC50_ina)-log10(m_QNDN))*QND_nH_ina))));
			qCaL = (1/(1+pow(10,((log10(QND_IC50_ical)-log10(m_QNDN))*QND_nH_ical))));
			qKs = (1/(1+pow(10,((log10(QND_IC50_iks)-log10(m_QNDN))*QND_nH_iks))));
			qTo = (1/(1+pow(10,((log10(QND_IC50_ito)-log10(m_QNDN))*QND_nH_ito))));
			qK1 = (1/(1+pow(10,((log10(QND_IC50_ik1)-log10(m_QNDN))*QND_nH_ik1))));
			qNaL = (1/(1+pow(10,((log10(QND_IC50_inal)-log10(m_QNDN))*QND_nH_inal))));


			mNa = mNaL = mTo = mCaL = mKr = mKs = mK1 = mNCX = mNaK = mCaP = mKb = mJrel = mJleak = mJup = 1.0;




			Names_Of_Cell_Variables =
			{
				"vm",
				"nai",
				"nass",
				"ki",
				"kss",
				"cai",
				"cass",
				"cansr",
				"cajsr",
				"mL",
				"hL",
				"hLp",
				"a",
				"iF",
				"iS",
				"ap",
				"iFp",
				"iSp",
				"d",
				"ff",
				"fs",
				"fcaf",
				"fcas",
				"jca",
				"nca",
				"ffp",
				"fcafp",
				"xrf",
				"xrs",
				"xs1",
				"xs2",
				"xk1",
				"Jrelnp",
				"Jrelp",
				"CaMKt",
				"wt_O",
				"wt_C1",
				"wt_C2",
				"wt_C3",
				"wt_I",
				"M",
				"H",
				"J",
				"mt_O",
				"mt_C1",
				"mt_C2",
				"mt_C3",
				"mt_I",
				"wt_drugO",
				"wt_drugI",
				"mt_drugO",
				"mt_drugI",
				"sodium_ba",
				"sodium_bi",
				"sodium_bc"
			};

			Names_Of_Output_Data = {  };

			FinalizeConstruction();
		}

		~DomHRd(){ }

	protected:
		
		unsigned index_of_membrane_potential_in_cell_data(){return 0;}

		double get_initial_state_variable(const unsigned &v)
		{
			switch(v)
			{
				case 0: return -87.5;
				case 1: return 7; // nai
				case 2: return 7; // nass
				case 3: return 145; // ki
				case 4: return 145; // kss
				case 5: return 1.0e-4; // cai
				case 6: return 1.0e-4; // cass
				case 7: return 1.2; // cansr
				case 8: return 1.2; // cajsr
				case 9: return 0; // mL
				case 10: return 1; // hL
				case 11: return 1; // hLp
				case 12: return 0; // a
				case 13: return 1; // iF
				case 14: return 1; // iS
				case 15: return 0; // ap
				case 16: return 1; // iFp
				case 17: return 1; // iSp
				case 18: return 0; // d
				case 19: return 1; // ff
				case 20: return 1; // fs
				case 21: return 1; // fcaf
				case 22: return 1; // fcas
				case 23: return 1; // jca
				case 24: return 0; // nca
				case 25: return 1; // ffp
				case 26: return 1; // fcafp
				case 27: return 0; // xrf
				case 28: return 0; // xrs
				case 29: return 0; // xs1
				case 30: return 0; // xs2
				case 31: return 1; // xk1
				case 32: return 0; // Jrelnp
				case 33: return 0; // Jrelp
				case 34: return 0; // CaMKt
				case 35: return 0.000455; // wt_O
				case 36: return 0.002337; // wt_C1
				case 37: return 0.000531; // wt_C2
				case 38: return 0.996642; // wt_C3
				case 39: return 0.000035; // wt_I
				case 40: return 0; // M
				case 41: return 1; // H
				case 42: return 1; // J
				case 35+8: return  0.001243; // mt_O
				case 36+8: return  0.141977; // mt_C1
				case 37+8: return  0.093321; // mt_C2
				case 38+8: return  0.763421; // mt_C3
				case 39+8: return 0.000039; // mt_I
				case 48: return 0.0; // wt_drugO
				case 49: return 0.0; // wt_drugI
				case 50: return 0.0; // mt_drugO
				case 51: return 0.0; // mt_drugI
				case 52: return 0.0; // sodium_ba
				case 53: return 0.0; // sodium_bi
				case 54: return 0.0; // sodium_bc
			}
			oomph_info << "dead" << std::endl;
			exit(0);
		}

		void TakeTimestep(const double& dt, const double& t, double* state)
		{
			// oomph_info << t << std::endl;
			//We don't want to take a time-step larger than 0.01ms
			if(dt>0.01)
			{
				const unsigned N_solve_at_0p01 = unsigned(dt/0.01);
				const double remainder = dt - N_solve_at_0p01*0.01;
				double t_running = t;

				for(unsigned n=0; n<N_solve_at_0p01; n++)
				{
					TakeTimestep(0.01, t_running, state);
					t_running+=0.01;
				}
				if(remainder>0.0)
				{
					TakeTimestep(remainder, t_running, state);
					t_running+=remainder;
				}
				// oomph_info << t_running << " " << t+dt << std::endl;
				return;
			}
			
			MutantType mutant = WT;
			if ( mutant == WT ) mutation = "WT";
			else if ( mutant == WTN588K ) mutation = "WTN588K";
			else if ( mutant == WTN588K_SM ) mutation = "WTN588K_SM";
			else if ( mutant == N588K ) mutation = "N588K";
			else if ( mutant == WTT618I ) mutation = "WTT618I";
			else if ( mutant == T618I ) mutation = "T618I";
			else if ( mutant == hERGblock ) mutation = "hERGblock";
			else if ( mutant == NONE ) mutation = "NONE";
			const char * m = mutation.c_str();

			// for(unsigned i=0; i<54; i++)
			// {
			// 	state[i+1] = Variables[i];
			// }
			// state[0] = Variables[54];

			const double Ist = this->get_stimulus(t);

			ENa=(R*T/F)*log(nao/state[1]);
			EK=(R*T/F)*log(ko/state[3]);
			EKs=(R*T/F)*log((ko+0.01833*nao)/(state[3]+0.01833*state[1]));
      
			CaMKb=CaMKo*(1.0-state[34])/(1.0+KmCaM/state[6]);
			CaMKa=CaMKb+state[34];
			
			vffrt=state[0]*F*F/(R*T);
			vfrt=state[0]*F/(R*T);

			// /*CRN INa formula */
			double b[6] = {939.974560650426, //DISO
			0.000169738123551310,
			563.473105744167,
			0.00106615174526344,
			209.454238514918,
			0.00805163962504710};
			//Calculated DISO affinities - Activated: 0.181uM, Inactivated: 1.892uM, Resting: 38.441uM

			// double b[6] = {1872.02383528088, //QUIN
			// 0.000172687653511515,
			// 890.371118394039,
			// 0.00111692732891175,
			// 258.010019419030,
			// 0.00459800160515398}; 
			// //Calculated QUIN affinities - Activated: 0.09225uM, Inactivated: 1.255uM, Resting: 17.821uM

			drug = 1e-6*m_DISO + 1e-6*m_QNDN;
			// drug = 1e-6*m_QNDN;

			AM = (0.32 * (state[0] + 47.13) / (1 - exp(-0.1 * (state[0] + 47.13))));
		    if (fabs(state[0] + 47.13) < 1e-10) AM = 3.2;
		    BM = (0.08 * exp(-(state[0]) / 11.0));
		    TAU_M = 1 / (AM + BM);
		    M_INF = AM * TAU_M;

		    if (state[0] >= -40.0)
		    {
		        AJ_1 = 0.0;
		        BJ_1 = (0.3 * exp(-2.535e-7 * state[0]) / (1 + exp(-0.1 * (state[0] + 32))));
		    }
		    else
		    {
		        AJ_1 = ((-1.2714e5 * exp(0.2444 * state[0]) - 3.474e-5 * exp(-0.04391 * state[0])) * (state[0] + 37.78) / (1 + exp(0.311 * (state[0] + 79.23))));
		        BJ_1 = (0.1212 * exp(-0.01052 * state[0]) / (1 + exp(-0.1378 * (state[0] + 40.14))));
		    }
		    TAU_J = 1 / (AJ_1 + BJ_1);
		    J_INF = AJ_1 * TAU_J;

		    if (state[0] >= -40.0)
		    {
		        AH_1 = 0.0;
		        BH_1 = (1 / (0.13 * (1 + exp((state[0] + 10.66) / -11.1))));
		    }
		    else
		    {
		        AH_1 = (0.135 * exp((state[0] + 80) / -6.8));
		        BH_1 = (3.56 * exp(0.079 * state[0]) + 3.1e5 * exp(0.35 * state[0]));
		    }
		    TAU_H = 1 / (AH_1 + BH_1);
		    H_INF = AH_1 * TAU_H;

		    ka = b[0];
		    la = b[1];
		    ki = b[2];
		    li = b[3];
		    kc = b[4];
		    lc = b[5];

			state[40] = M_INF - (M_INF - state[40]) * exp(-dt / TAU_M);
			state[41] = H_INF - (H_INF - state[41]) * exp(-dt / TAU_H);
			state[42] = J_INF - (J_INF - state[42]) * exp(-dt / TAU_J);

			state[52] += dt * (ka*drug*state[40]*state[40]*state[40]*state[41]*state[42]*(1-state[52]-state[53]-state[54])-la*state[52]);
			state[53] += dt * (ki*drug*(1-state[41]*state[42])*(1-state[52]-state[53]-state[54])-li*state[53]);
			state[54] += dt * (kc*drug*((1-state[40]*state[40]*state[40])*state[41]*state[42])*(1-state[52]-state[53]-state[54])-lc*state[54]);

			GNa_CRN = mNa * 0.7*14.838;//7.8;
			INa = GNa_ISO * GNa_CRN * (1 - state[52] - state[53] - state[54]) * state[40] * state[40] * state[40] * state[41] * state[42] * (state[0] - ENa);
			// INa = GNa_ISO * GNa_CRN * state[40] * state[40] * state[40] * state[41] * state[42] * (state[0] - ENa);
			current[9] = state[52];
			current[10] = state[53];
			current[11] = state[54];
			current[12] = state[52]+state[53]+state[54];

			// /*TNNP INa formula*/
			// AM = 1. / (1. + exp((-60. - state[0]) / 5.));
			// BM = 0.1 / (1. + exp((state[0] + 35.) / 5.)) + 0.10 / (1. + exp((state[0] - 50.) / 200.));
			// TAU_M = AM * BM;
			// if (TAU_M < 0.01) {
			// 	TAU_M = 0.01;
			// }
			// if (state[0] > 20)
			// {
			// 	TAU_M = 0.05;
			// }
			// tm_TNNP = TAU_M;

			// M_INF = 1. / ((1. + exp((-56.86 - state[0]) / 9.03)) * (1. + exp((-56.86 - state[0]) / 9.03)));
			// if (state[0] >= -40.) {
			// 	AH_1 = 0.;
			// 	BH_1 = (0.77 / (0.13 * (1. + exp(-(state[0] + 10.66) / 11.1))));
			// 	TAU_H = 1.0 / (AH_1 + BH_1);
			// } else {
			// 	AH_2 = (0.057 * exp(-(state[0] + 80.) / 6.8));
			// 	BH_2 = (2.7 * exp(0.079 * state[0]) + (3.1e5) * exp(0.3485 * state[0]));
			// 	TAU_H = 1.0 / (AH_2 + BH_2);
			// }
			// H_INF = 1. / ((1. + exp((state[0] + 71.55 + INah_half) / 7.43)) * (1. + exp((state[0] + 71.55 + INah_half) / 7.43)));
			// if (state[0] >= -40.) {
			// 	AJ_1 = 0.;
			// 	BJ_1 = (0.6 * exp((0.057) * state[0]) / (1. + exp(-0.1 * (state[0] + 32.))));
			// 	TAU_J = 1.0 / (AJ_1 + BJ_1);
			// } else {
			// 	AJ_2 = (((-2.5428e4) * exp(0.2444 * state[0]) - (6.948e-6) *
			// 	                exp(-0.04391 * state[0])) * (state[0] + 37.78) /
			// 	               (1. + exp(0.311 * (state[0] + 79.23))));
			// 	BJ_2 = (0.02424 * exp(-0.01052 * state[0]) / (1. + exp(-0.1378 * (state[0] + 40.14))));
			// 	TAU_J = 1.0 / (AJ_2 + BJ_2);
			// }
			// J_INF = H_INF;

			// state[40] = M_INF - (M_INF - state[40]) * exp(-dt / TAU_M);
			// state[41] = H_INF - (H_INF - state[41]) * exp(-dt / TAU_H);
			// state[42] = J_INF - (J_INF - state[42]) * exp(-dt / TAU_J);
			// GNa_TNNP = mNa * 0.8*14.838;
			// INa = (1.0 - qNa) * (1.0 - fNa) * GNa_ISO * GNa_TNNP * state[40] * state[40] * state[40] * state[41] * state[42] * (state[0] - ENa);
	        
			mLss=1.0/(1.0+exp((-(state[0]+42.85))/5.264));
			tmL=TAU_M;
			state[9]=mLss-(mLss-state[9])*exp(-dt/tmL);
			hLss=1.0/(1.0+exp((state[0]+87.61)/7.488));
			thL=200.0;
			state[10]=hLss-(hLss-state[10])*exp(-dt/thL);
			hLssp=1.0/(1.0+exp((state[0]+93.81)/7.488));
			thLp=3.0*thL;
			state[11]=hLssp-(hLssp-state[11])*exp(-dt/thLp);
			GNaL=mNaL*0.0075;
			if ( m_celltype == LVEPI ) {
				GNaL*=0.6;
			}
			fINaLp=(1.0/(1.0+KmCaMK/CaMKa));
			INaL=(1.0 - qNaL) * GNaL*(state[0]-ENa)*state[9]*((1.0-fINaLp)*state[10]+fINaLp*state[11]);

			ass=1.0/(1.0+exp((-(state[0]-14.34))/14.82));
			ta=1.0515/(1.0/(1.2089*(1.0+exp(-(state[0]-18.4099)/29.3814)))+3.5/(1.0+exp((state[0]+100.0)/29.3814)));
			state[12]=ass-(ass-state[12])*exp(-dt/ta);
			iss=1.0/(1.0+exp((state[0]+43.94)/5.711));
			if ( m_celltype == LVEPI ) {
				delta_epi=1.0-(0.95/(1.0+exp((state[0]+70.0)/5.0)));
			}
			else {
				delta_epi=1.0;
			}
			tiF=4.562+1/(0.3933*exp((-(state[0]+100.0))/100.0)+0.08004*exp((state[0]+50.0)/16.59));
			tiS=23.62+1/(0.001416*exp((-(state[0]+96.52))/59.05)+1.780e-8*exp((state[0]+114.1)/8.079));
			tiF*=delta_epi;
			tiS*=delta_epi;
			AiF=1.0/(1.0+exp((state[0]-213.6)/151.2));
			AiS=1.0-AiF;
			state[13]=iss-(iss-state[13])*exp(-dt/tiF);
			state[14]=iss-(iss-state[14])*exp(-dt/tiS);
			i=AiF*state[13]+AiS*state[14];
			assp=1.0/(1.0+exp((-(state[0]-24.34))/14.82));
			state[15]=assp-(assp-state[15])*exp(-dt/ta);
			dti_develop=1.354+1.0e-4/(exp((state[0]-167.4)/15.89)+exp(-(state[0]-12.23)/0.2154));
			dti_recover=1.0-0.5/(1.0+exp((state[0]+70.0)/20.0));
			tiFp=dti_develop*dti_recover*tiF;
			tiSp=dti_develop*dti_recover*tiS;
			state[16]=iss-(iss-state[16])*exp(-dt/tiFp);
			state[17]=iss-(iss-state[17])*exp(-dt/tiSp);
			ip=AiF*state[16]+AiS*state[17];
			Gto=mTo*0.02;
			// Gto=0.02*0.8057; //Ismail-Dom
			if ( m_celltype == LVENDO )
				Gto *= 1.0;
			else if ( m_celltype == RVENDO )
				Gto *= 4.0;
			else if ( m_celltype == LVEPI or m_celltype == LVMCELL ) {
				Gto *= 4.0;
			}
			else if ( m_celltype == RVEPI or m_celltype == RVMCELL ) {
				Gto *= 4.0 * 4.0;
			}			
			
			fItop=(1.0/(1.0+KmCaMK/CaMKa));
	        Ito=(1.0 - qTo) * (1.0 - fTo) * Gto*(state[0]-EK)*((1.0-fItop)*state[12]*i+fItop*state[15]*ip);
	        
			dss=1.0/(1.0+exp((-(state[0]+3.940+ICaLd_half))/4.230));
			td=0.6+1.0/(exp(-0.05*(state[0]+6.0))+exp(0.09*(state[0]+14.0)));
			state[18]=dss-(dss-state[18])*exp(-dt/td);
			fss=1.0/(1.0+exp((state[0]+19.58+ICaLf_half)/3.696));
			tff=Tau_ICaL_ff_ISO*(7.0+1.0/(0.0045*exp(-(state[0]+20.0)/10.0)+0.0045*exp((state[0]+20.0)/10.0)));
			tfs=1000.0+1.0/(0.000035*exp(-(state[0]+5.0)/4.0)+0.000035*exp((state[0]+5.0)/6.0));
			Aff=0.6;
			Afs=1.0-Aff;
			state[19]=fss-(fss-state[19])*exp(-dt/tff);
			state[20]=fss-(fss-state[20])*exp(-dt/tfs);
			f=Aff*state[19]+Afs*state[20];
			fcass=fss;
			tfcaf=7.0+1.0/(0.04*exp(-(state[0]-4.0)/7.0)+0.04*exp((state[0]-4.0)/7.0));
			tfcas=100.0+1.0/(0.00012*exp(-state[0]/3.0)+0.00012*exp(state[0]/7.0));
			Afcaf=0.3+0.6/(1.0+exp((state[0]-10.0)/10.0));
			Afcas=1.0-Afcaf;
			state[21]=fcass-(fcass-state[21])*exp(-dt/tfcaf);
			state[22]=fcass-(fcass-state[22])*exp(-dt/tfcas);
			fca=Afcaf*state[21]+Afcas*state[22];
			tjca=75.0;
			state[23]=fcass-(fcass-state[23])*exp(-dt/tjca);
			tffp=2.5*tff;
			state[25]=fss-(fss-state[25])*exp(-dt/tffp);
			fp=Aff*state[25]+Afs*state[20];
			tfcafp=2.5*tfcaf;
			state[26]=fcass-(fcass-state[26])*exp(-dt/tfcafp);
			fcap=Afcaf*state[26]+Afcas*state[22];
			Kmn=0.002;
			k2n=1000.0;
			km2n=state[23]*1.0;
			anca=1.0/(k2n/km2n+pow(1.0+Kmn/state[6],4.0));
			state[24]=anca*k2n/km2n-(anca*k2n/km2n-state[24])*exp(-km2n*dt);

			if (state[6] > 0.03)
			{
				state[6] = 0.03;   // 0.03mM ceiling, from ref 1. * 1. Ohara et al. Arrhythmia formation in subclinical (“silent”) long QT syndrome requires multiple insults: Quantitative mechanistic study using the KCNQ1 mutation Q357R as example
			}

			PhiCaL=4.0*vffrt*(state[6]*exp(2.0*vfrt)-0.341*cao)/(exp(2.0*vfrt)-1.0);
			PhiCaNa=1.0*vffrt*(0.75*state[2]*exp(1.0*vfrt)-0.75*nao)/(exp(1.0*vfrt)-1.0);
			PhiCaK=1.0*vffrt*(0.75*state[4]*exp(1.0*vfrt)-0.75*ko)/(exp(1.0*vfrt)-1.0);

			zca=2.0;
			PCa=2.01*Pca_ISO*0.0001; //2.01 Mann et al.
			// PCa=0.0001*0.8119589972*Pca_ISO; //Ismail-Dom
			if ( m_celltype == LVEPI or m_celltype == RVEPI ) {
				PCa*=1.2;
			}
			if ( m_celltype == LVMCELL or m_celltype == RVMCELL ) {
				PCa*=2.5;
			}
			PCap=1.1*PCa;
			PCaNa=0.00125*PCa;
			PCaK=3.574e-4*PCa;
			PCaNap=0.00125*PCap;
			PCaKp=3.574e-4*PCap;
			fICaLp=(1.0/(1.0+KmCaMK/CaMKa));

			ICaL=(1.0 - qCaL) * (1.0 - fCaL)*(1.0-fICaLp)*mCaL*gcal*PCa*PhiCaL*state[18]*(f*(1.0-state[24])+state[23]*fca*state[24])+fICaLp*PCap*PhiCaL*state[18]*(fp*(1.0-state[24])+state[23]*fcap*state[24]);			
			ICaNa=(1.0-fICaLp)*PCaNa*PhiCaNa*state[18]*(f*(1.0-state[24])+state[23]*fca*state[24])+fICaLp*PCaNap*PhiCaNa*state[18]*(fp*(1.0-state[24])+state[23]*fcap*state[24]);
			ICaK=(1.0-fICaLp)*PCaK*PhiCaK*state[18]*(f*(1.0-state[24])+state[23]*fca*state[24])+fICaLp*PCaKp*PhiCaK*state[18]*(fp*(1.0-state[24])+state[23]*fcap*state[24]);
	        
			// IKr

		if ( m_mutant == WT || m_mutant == WTN588K || m_mutant == WTN588K_SM || m_mutant == N588K ) {

		const double diffusion = 1000;
		const double k_open = 10.66e-6;
		const double k_inact = 2.0e-3;
		// if(m_DISO != 0) drug = 1e-6*m_DISO;
		// else drug = 1e-6*m_QNDN;
		// drug = 0.0;
		// if (t < 50000) drug = 0.0;
		// else drug = 1e-6*m_DISO;

		drug = 1e-6*m_DISO + 1e-6*m_QNDN;
		// drug = 1e-6*m_QNDN;

			double p[17] = {2.08004063522165, //APD ~261.3 (0.12542 beta_i exponential coefficient) CASE 6
			2.50875395544348,
			3.60905309178072,
			2.73390617319486,
			3.33271595393881,
			1.47115111959219,
			0.321972376120660,
			1.50596796674310,
			1.49580888663070,
			0.701828674378185,
			1.75727774395353,
			0.126980039248127,
			0.540710123122593,
			0.131132874102078,
			75.9096892740988,
			25.9260324063269,
			15.5035825600548};

			    double q[17] = {2.98349305118573,
			15.7041681553234,
			1.33629958573073,
			3.52191083720381,
			12.8897423387520,
			0.00342790949565298,
			0.482492028153699,
			0.187323609724938,
			0.649399222683715,
			0.332879733847458,
			2.36039336622530,
			3.76536556177970e-05,
			2.03515482876354,
			1.90110625131818,
			23.5281854676528,
			35.0816032610417,
			44.2223402937503
			};

			// double r[3] = {0.996924440469730, //Disopyramide
			// 0.00377402209823587,
			// 1.21896714790284};

			// double r[3] = {2.40001111220193, //Disopyramide new
			// 0.0105935964643519,
			// 3.30230005760925};

			// double r[3] = {19.2963268896080, //Quinidine
			// 0.00625481399288564,
			// 5.78719933744576};

			//REMEMBER HERE TO INCLUDE DIFFUSION AND OPEN/INACT AFFINITIES WHEN COMPUTING AFFINITIES FOR PAPER

			double r[4] = {0.713698056648780, //Disopyramide final
			0.00449656834337685,
			20.1099961524813,
			26.9550245214410};
			// Calculated DISO affinities - Activated: 14.288uM, Inactivated: 12.601uM

			// double r[4] = {19.1248594831794, //Quinidine final
			// 0.00645077580155141,
			// 1445.80869808620,
			// 410.274508870134};
			// // Calculated QUIN affinities - Activated: 3.025uM, Inactivated: 0.675uM

      // GKr = 1.0*0.0135*pow(ko,0.59);
      GKr = 1.1*0.0135*pow(ko,0.59); //1.1 Mann, 1.5 original, 1.2 cinc

	    if ( m_celltype == LVENDO or m_celltype == RVENDO ) {
				GKr = 1.0 * GKr;
			}
			if ( m_celltype == LVEPI or m_celltype == RVEPI ) {
				GKr = 1.6 * GKr; 
			}
			if ( m_celltype == LVMCELL or m_celltype == RVMCELL ) {
				GKr = 1.0 * GKr;
			}

		    wt_a1 = p[0]*0.5*2.572; 
		    wt_b1 = p[1]*0.5*1.277;
		    wt_a2 = p[2]*0.02055*exp(p[8]*0.011735765*(state[0]-p[14]));
		    wt_a = p[3]*0.0655*exp(p[9]*0.06547153*(state[0]-p[15]));
		    wt_b = p[4]*0.0555357*exp(-p[10]*0.026588*(state[0]));
		    wt_b2 = p[5]*0.00182205*exp(-p[11]*0.0508902*(state[0])); 
		    wt_ai = p[6]*0.52829*exp(-p[12]*0.030984*(state[0]+p[16]))*(4.5/ko);
		    wt_bi = p[7]*0.5624*exp(p[13]*0.13942*(state[0]))*((pow((4.5/ko),0.3)));
		    wt_mu = (wt_ai*wt_b2)/wt_bi;
			// drug-binding rates
		    wt_ki = r[0]*diffusion*drug;
		    wt_li = r[1]*diffusion*k_inact;
		    wt_ko = r[2]*diffusion*drug;
		    wt_lo = r[3]*diffusion*k_open;

	        wt_dC3 = (wt_b * state[37]) - (wt_a * state[38]);
		    wt_dC2 = -((wt_b + wt_a1) * state[37]) + (wt_a * state[38]) + (wt_b1 * state[36]);
		    wt_dC1 = -((wt_b1 + wt_a2 + wt_a2) * state[36]) + (wt_a1 * state[37]) + (wt_b2 * state[35]) + (wt_mu * state[39]);
		    wt_dO  =  -((wt_b2 + wt_bi + wt_ko) * state[35]) + (wt_a2 * state[36]) + (wt_ai * state[39]) + (wt_lo * state[48]);
		    wt_dI  = -((wt_mu + wt_ai + wt_ki) * state[39]) + (wt_a2 * state[36]) + (wt_bi * state[35]) + (wt_li * state[49]);
	    	wt_d_drugO = -(wt_lo * state[48]) + (wt_ko * state[35]);
	    	wt_d_drugI = -(wt_li * state[49]) + (wt_ki * state[39]);

		    state[35] += dt*wt_dO;
		    state[36] += dt*wt_dC1;
		    state[37] += dt*wt_dC2;
		    state[38] += dt*wt_dC3;
		    state[39] += dt*wt_dI;
		    state[48] += dt*wt_d_drugO;
		    state[49] += dt*wt_d_drugI;

		    // wt_IKr = (1.0 - qKr_WT) * (1.0 - fKr_WT) * mKr * GKr * state[35] * (state[0] - EK); //simple pore block
		    wt_IKr = mKr * gkr*GKr * state[35] * (state[0] - EK); //drug binding model

		    current[0] = state[48];
		    current[1] = state[49];
		    current[2] = current[0]+current[1];

		    mt_a1 = q[0]*0.5*2.572; //NEW N588K (20/07/16) //CASE 3
		    mt_b1 = q[1]*0.5*1.277;
		    mt_a2 = q[2]*0.065*exp(q[8]*0.029735765*(state[0]-q[14]));
		    mt_a = q[3]*0.030255*exp(q[9]*0.06547153*(state[0]-q[15]));
		    mt_b = q[4]*0.0055357*exp(-q[10]*0.026588*(state[0]));
		    mt_b2 = q[5]*0.602205*exp(-q[11]*0.651902*(state[0]));
		    mt_ai = q[6]*0.5829*exp(-q[12]*0.008984*(state[0]+q[16]))*(4.5/ko);
		    mt_bi = q[7]*0.06624*exp(q[13]*0.00942*(state[0]))*((pow((4.5/ko),0.3)));
		    mt_mu = (mt_ai*mt_b2)/mt_bi;
			// drug-binding rates
		    mt_ki = r[0]*diffusion*drug;
		    mt_li = r[1]*diffusion*k_inact;
		    mt_ko = r[2]*diffusion*drug;
		    mt_lo = r[3]*diffusion*k_open;

	        mt_dC3 = (mt_b * state[37+8]) - (mt_a * state[38+8]);
		    mt_dC2 = -((mt_b + mt_a1) * state[37+8]) + (mt_a * state[38+8]) + (mt_b1 * state[36+8]);
		    mt_dC1 = -((mt_b1 + mt_a2 + mt_a2) * state[36+8]) + (mt_a1 * state[37+8]) + (mt_b2 * state[35+8]) + (mt_mu * state[39+8]);
		    mt_dO  =  -((mt_b2 + mt_bi + mt_ko) * state[35+8]) + (mt_a2 * state[36+8]) + (mt_ai * state[39+8]) + (mt_lo * state[50]);
		    mt_dI  = -((mt_mu + mt_ai + mt_ki) * state[39+8]) + (mt_a2 * state[36+8]) + (mt_bi * state[35+8]) + (mt_li * state[51]);
	    	mt_d_drugO = -(mt_lo * state[50]) + (mt_ko * state[35+8]);
	    	mt_d_drugI = -(mt_li * state[51]) + (mt_ki * state[39+8]);

		    state[35+8] += dt*mt_dO;
		    state[36+8] += dt*mt_dC1;
		    state[37+8] += dt*mt_dC2;
		    state[38+8] += dt*mt_dC3;
		    state[39+8] += dt*mt_dI;
		    state[50] += dt*mt_d_drugO;
		    state[51] += dt*mt_d_drugI;

		    // mt_IKr = (1.0 - qKr_N588K) * (1.0 - fKr_N588K) * mKr * GKr * state[35+8] * (state[0] - EK); //simple pore block
		    mt_IKr = mKr * gkr*GKr * state[35+8] * (state[0] - EK); //drug binding model

		    current[3] = state[50];
		    current[4] = state[51];
		    current[5] = current[3]+current[4];

		    current[6] = 0.5*(current[0]+current[3]); //total blocked channels open state
		    current[7] = 0.5*(current[1]+current[4]); //total blocked channels inactivated state
		    current[8] = (current[6]+current[7]); //total blocked channels

		    if ( m_mutant == WT ) IKr = wt_IKr;
		    else if ( m_mutant == WTN588K ) IKr = 0.5*(wt_IKr+mt_IKr);
		    else if ( m_mutant == WTN588K_SM ) IKr = (0.75*wt_IKr)+(0.25*mt_IKr);
		    else if ( m_mutant == N588K ) IKr = mt_IKr;
		}

	else if ( m_mutant == WTT618I || m_mutant == T618I ) {

	const double diffusion = 1000;
	const double k_open = 10.66e-6;
	const double k_inact = 2.0e-3;

	drug = 1e-6*m_DISO + 1e-6*m_QNDN;
	// drug = 1e-6*m_QNDN;
	// drug = 0.0;
	// if (t < 50000) drug = 0.0;
	// else drug = 1e-6*m_DISO;

	double p[17] = {2.08004063522165, //APD ~261.3 (0.12542 beta_i exponential coefficient) CASE 6
	2.50875395544348,
	3.60905309178072,
	2.73390617319486,
	3.33271595393881,
	1.47115111959219,
	0.321972376120660,
	1.50596796674310,
	1.49580888663070,
	0.701828674378185,
	1.75727774395353,
	0.126980039248127,
	0.540710123122593,
	0.131132874102078,
	75.9096892740988,
	25.9260324063269,
	15.5035825600548};

		double q[17] = {2.26343096909267, //CASE 2
	15.8313252803987,
	1.59714201483664,
	3.11773274643762,
	15.9654413916145,
	0.00404278344279940,
	0.791806257135860,
	0.449196641313139,
	0.823973923318379,
	0.581482215365052,
	1.11988824010156,
	2.76682210706170e-05,
	3.55143209920843,
	0.00771430226670200,
	25.4320734603375,
	45.4484880975905,
	52.2446530897330};

	// double r[3] = {0.996924440469730, //Disopyramide
	// 0.00377402209823587,
	// 1.21896714790284};

	// double r[3] = {2.40001111220193, //Disopyramide new
	// 0.0105935964643519,
	// 3.30230005760925};

	// double r[3] = {19.2963268896080, //Quinidine
	// 0.00625481399288564,
	// 5.78719933744576};

	//REMEMBER HERE TO INCLUDE DIFFUSION AND OPEN/INACT AFFINITIES WHEN COMPUTING AFFINITIES FOR PAPER

	double r[4] = {0.713698056648780, //Disopyramide final
	0.00449656834337685,
	20.1099961524813,
	26.9550245214410};
	//Calculated DISO affinities - Activated: 14.288uM, Inactivated: 12.601uM

	// double r[4] = {19.1248594831794, //Quinidine final
	// 0.00645077580155141,
	// 1445.80869808620,
	// 410.274508870134};
	// // Calculated QUIN affinities - Activated: 3.025uM, Inactivated: 0.675uM

	        GKr = 1.1*0.0135*pow(ko,0.59); //1.1 Mann, 1.5 original, 1.2 cinc

		    if ( m_celltype == LVENDO or m_celltype == RVENDO ) {
				GKr = 1.0 * GKr;
			}
			if ( m_celltype == LVEPI or m_celltype == RVEPI ) {
				GKr = 1.6 * GKr; 
			}
			if ( m_celltype == LVMCELL or m_celltype == RVMCELL ) {
				GKr = 1.0 * GKr;
			}

		    wt_a1 = p[0]*0.5*2.572; 
		    wt_b1 = p[1]*0.5*1.277;
		    wt_a2 = p[2]*0.02055*exp(p[8]*0.011735765*(state[0]-p[14]));
		    wt_a = p[3]*0.0655*exp(p[9]*0.06547153*(state[0]-p[15]));
		    wt_b = p[4]*0.0555357*exp(-p[10]*0.026588*(state[0]));
		    wt_b2 = p[5]*0.00182205*exp(-p[11]*0.0508902*(state[0])); 
		    wt_ai = p[6]*0.52829*exp(-p[12]*0.030984*(state[0]+p[16]))*(4.5/ko);
		    wt_bi = p[7]*0.5624*exp(p[13]*0.13942*(state[0]))*((pow((4.5/ko),0.3)));
		    wt_mu = (wt_ai*wt_b2)/wt_bi;
			// drug-binding rates
		    wt_ki = r[0]*diffusion*drug;
		    wt_li = r[1]*diffusion*k_inact;
		    wt_ko = r[2]*diffusion*drug;
		    wt_lo = r[3]*diffusion*k_open;

	        wt_dC3 = (wt_b * state[37]) - (wt_a * state[38]);
		    wt_dC2 = -((wt_b + wt_a1) * state[37]) + (wt_a * state[38]) + (wt_b1 * state[36]);
		    wt_dC1 = -((wt_b1 + wt_a2 + wt_a2) * state[36]) + (wt_a1 * state[37]) + (wt_b2 * state[35]) + (wt_mu * state[39]);
		    wt_dO  =  -((wt_b2 + wt_bi + wt_ko) * state[35]) + (wt_a2 * state[36]) + (wt_ai * state[39]) + (wt_lo * state[48]);
		    wt_dI  = -((wt_mu + wt_ai + wt_ki) * state[39]) + (wt_a2 * state[36]) + (wt_bi * state[35]) + (wt_li * state[49]);
	    	wt_d_drugO = -(wt_lo * state[48]) + (wt_ko * state[35]);
	    	wt_d_drugI = -(wt_li * state[49]) + (wt_ki * state[39]);

		    state[35] += dt*wt_dO;
		    state[36] += dt*wt_dC1;
		    state[37] += dt*wt_dC2;
		    state[38] += dt*wt_dC3;
		    state[39] += dt*wt_dI;
		    state[48] += dt*wt_d_drugO;
		    state[49] += dt*wt_d_drugI;

		    // wt_IKr = (1.0 - qKr_WT) * (1.0 - fKr_WT) * mKr * GKr * state[35] * (state[0] - EK); //simple pore block
		    wt_IKr = mKr * gkr*GKr * state[35] * (state[0] - EK); //drug binding model

		    current[0] = state[48];
		    current[1] = state[49];
		    current[2] = current[0]+current[1];

		    mt_a1 = q[0]*0.5*2.572;
		    mt_b1 = q[1]*0.5*1.277;
		    mt_a2 = q[2]*0.065*exp(q[8]*0.029735765*(state[0]-q[14]));
		    mt_a = q[3]*0.030255*exp(q[9]*0.06547153*(state[0]-q[15]));
		    mt_b = q[4]*0.0055357*exp(-q[10]*0.026588*(state[0]));
		    mt_b2 = q[5]*0.602205*exp(-q[11]*0.651902*(state[0]));
		    mt_ai = q[6]*0.5829*exp(-q[12]*0.008984*(state[0]+q[16]))*(4.5/ko);
		    mt_bi = q[7]*0.06624*exp(q[13]*0.01942*(state[0]))*((pow((4.5/ko),0.3)));
		    mt_mu = (mt_ai*mt_b2)/mt_bi;
			// drug-binding rates
		    mt_ki = r[0]*diffusion*drug;
		    mt_li = r[1]*diffusion*k_inact;
		    mt_ko = r[2]*diffusion*drug;
		    mt_lo = r[3]*diffusion*k_open;

			// printf("rate = %f\n", q[13]*0.01942);

	        mt_dC3 = (mt_b * state[37+8]) - (mt_a * state[38+8]);
		    mt_dC2 = -((mt_b + mt_a1) * state[37+8]) + (mt_a * state[38+8]) + (mt_b1 * state[36+8]);
		    mt_dC1 = -((mt_b1 + mt_a2 + mt_a2) * state[36+8]) + (mt_a1 * state[37+8]) + (mt_b2 * state[35+8]) + (mt_mu * state[39+8]);
		    mt_dO  =  -((mt_b2 + mt_bi + mt_ko) * state[35+8]) + (mt_a2 * state[36+8]) + (mt_ai * state[39+8]) + (mt_lo * state[50]);
		    mt_dI  = -((mt_mu + mt_ai + mt_ki) * state[39+8]) + (mt_a2 * state[36+8]) + (mt_bi * state[35+8]) + (mt_li * state[51]);
	    	mt_d_drugO = -(mt_lo * state[50]) + (mt_ko * state[35+8]);
	    	mt_d_drugI = -(mt_li * state[51]) + (mt_ki * state[39+8]);

		    state[35+8] += dt*mt_dO;
		    state[36+8] += dt*mt_dC1;
		    state[37+8] += dt*mt_dC2;
		    state[38+8] += dt*mt_dC3;
		    state[39+8] += dt*mt_dI;
		    state[50] += dt*mt_d_drugO;
		    state[51] += dt*mt_d_drugI;

		    // mt_IKr = (1.0 - qKr_N588K) * (1.0 - fKr_T618I) * mKr * GKr * state[35+8] * (state[0] - EK); //simple pore block
		    mt_IKr = mKr * gkr*GKr * state[35+8] * (state[0] - EK); // drug binding model

		    current[3] = state[50];
		    current[4] = state[51];
		    current[5] = current[3]+current[4];

		    current[6] = 0.5*(current[0]+current[3]); //total blocked channels open state
		    current[7] = 0.5*(current[1]+current[4]); //total blocked channels inactivated state
		    current[8] = (current[6]+current[7]); //total blocked channels

		    if ( m_mutant == WTT618I ) IKr = 0.5*(wt_IKr+mt_IKr);
		    else if ( m_mutant == T618I ) IKr = mt_IKr;
		}

			else if ( m_mutant == hERGblock) {
				double p[9] = {0.97680478,  1.94882433,  1.24045884,  1.17209961,  0.08895753,
		        1.89469385,  1.31802629,  0.41249519,  0.04648476};

			    wt_a1 = p[0]*3.5*2.572; //NEW N588K (15/04/15)
			    wt_b1 = p[1]*3.5*1.277;
			    wt_a2 = p[2]*0.0085*exp(0.029735765*(state[0]-36.));
			    wt_a = p[3]*0.60255*exp(0.06547153*(state[0]-12.));
			    wt_b = p[4]*0.155357*exp(-0.066588*(state[0]));
			    wt_b2 = p[5]*0.000072205*exp(-0.0651902*(state[0]));
			    wt_ai = p[6]*0.5829*exp(-0.008984*(state[0]+10.))*(4.5/ko);
			    wt_bi = p[7]*0.06624*exp(0.02942*(state[0]))*((pow((4.5/ko),0.3)));
			    wt_mu = (wt_ai*wt_b2)/wt_bi;

		        wt_dC3 = (wt_b * state[37]) - (wt_a * state[38]);
			    wt_dC2 = -((wt_b + wt_a1) * state[37]) + (wt_a * state[38]) + (wt_b1 * state[36]);
			    wt_dC1 = -((wt_b1 + wt_a2 + wt_a2) * state[36]) + (wt_a1 * state[37]) + (wt_b2 * state[35]) + (wt_mu * state[39]);
			    wt_dO  =  -((wt_b2 + wt_bi) * state[35]) + (wt_a2 * state[36]) + (wt_ai * state[39]);
			    wt_dI  = -((wt_mu + wt_ai) * state[39]) + (wt_a2 * state[36]) + (wt_bi * state[35]);

			    state[35] += dt*wt_dO;
			    state[36] += dt*wt_dC1;
			    state[37] += dt*wt_dC2;
			    state[38] += dt*wt_dC3;
			    state[39]  += dt*wt_dI;

			    GKr = 0*0.5*2.0*0.0135*pow(ko,0.59);
			    if ( m_celltype == LVENDO or m_celltype == RVENDO ) {
					GKr = 0.8 * GKr;
				}
				if ( m_celltype == LVEPI or m_celltype == RVEPI ) {
					GKr = 1.7 * GKr; 
				}
				if ( m_celltype == LVMCELL or m_celltype == RVMCELL ) {
					GKr = 0.6 * GKr;
				}

			    IKr = (1.0 - qKr_N588K) * (1.0 - fKr_N588K) * mKr * GKr * state[35] * (state[0] - EK);
			}

			else if ( m_mutant == NONE ) {
				xrss=1.0/(1.0+exp((-(state[0]+8.337))/6.789));
				txrf=12.98+1.0/(0.3652*exp((state[0]-31.66)/3.869)+4.123e-5*exp((-(state[0]-47.78))/20.38));
				txrs=1.865+1.0/(0.06629*exp((state[0]-34.70)/7.355)+1.128e-5*exp((-(state[0]-29.74))/25.94));
				Axrf=1.0/(1.0+exp((state[0]+54.81)/38.21));
				Axrs=1.0-Axrf;
				state[27]=xrss-(xrss-state[27])*exp(-dt/txrf);
				state[28]=xrss-(xrss-state[28])*exp(-dt/txrs);
				xr=Axrf*state[27]+Axrs*state[28];
				rkr=1.0/(1.0+exp((state[0]+55.0)/75.0))*1.0/(1.0+exp((state[0]-10.0)/30.0));
				GKr=0.046;
				if ( m_celltype == LVENDO or m_celltype == RVENDO ) {
					GKr = 1.0 * GKr; //0.046;
				}
				if ( m_celltype == LVEPI or m_celltype == RVEPI ) {
					GKr *= 1.3;
				}
				if ( m_celltype == LVMCELL or m_celltype == RVMCELL ) {
					GKr *= 0.8;
				}
				
				IKr=mKr*GKr*sqrt(ko/5.4)*xr*rkr*(state[0]-EK);
			} 

			// // // Haibo CinC IKs
			// xs1ss =  1.0 / (1 + exp((state[0]  + 17.885040571 + IKs_ac_shift_ISO) / -15.1227904715)) ;  // the final formulation. x1ss * x2ss = steadystate activation
			// txs1 = Tau_Ks * ( 817.3 + 1.0 / (2.326e-4 * exp((state[0] + 48.28) / 17.80) + 0.001292 * exp((-(state[0] + 210.0)) / 230.0)));
			// state[29] = xs1ss - (xs1ss - state[29]) * exp(-dt / txs1);
			// xs2ss = xs1ss;
			// txs2 = 1.0 / (0.01 * exp((state[0] - 50.0) / 20.0) + 0.0071038 * exp((-(state[0] + 90.5741763432)) / 69.080));
			// state[30] = xs2ss - (xs2ss - state[30]) * exp(-dt / txs2);
			// KsCa = 1.0 + 0.6 / (1.0 + pow(3.8e-5 / state[5], 1.4));
			// GKs = mKs*0.00595; // to make sure that the new WT IKs produced same APD90 as the original ORd IKs model
			// // GKs = 1.75*0.0034; // to make sure that the new WT IKs produced same APD90 as the original ORd IKs model
	        
	        // Original ORd IKs
			xs1ss=1.0/(1.0+exp((-(state[0]+11.60+IKs_ac_shift_ISO))/8.932));
			txs1=Tau_Ks*(817.3+1.0/(2.326e-4*exp((state[0]+48.28)/17.80)+0.001292*exp((-(state[0]+210.0))/230.0)));
			state[29]=xs1ss-(xs1ss-state[29])*exp(-dt/txs1);

			
			xs2ss=xs1ss;
			txs2=1.0/(0.01*exp((state[0]-50.0)/20.0)+0.0193*exp((-(state[0]+66.54))/31.0));
			state[30]=xs2ss-(xs2ss-state[30])*exp(-dt/txs2);


			KsCa=1.0+0.6/(1.0+pow(3.8e-5/state[5],1.4));
			GKs=/*0.00626;//*/mKs*5.75*0.0034; //5.75 Mann et al.


			if ( m_celltype == LVENDO ) {
				GKs *= 1.0;
			}
			else if ( m_celltype == LVMCELL ) {
				GKs *= 1.0;
			}
			else if ( m_celltype == LVEPI ) {
				GKs *= 1.4;
			}
		
			IKs=(1.0 - qKs) * (1.0 - fKs) * gks*GKs_ISO*GKs*KsCa*state[29]*state[30]*(state[0]-EKs);
	        
			// IK1
			xk1ss=1.0/(1.0+exp(-(state[0]+2.5538*ko+144.59)/(1.5692*ko+3.8115)));
			txk1=122.2/(exp((-(state[0]+127.2))/20.36)+exp((state[0]+236.8)/69.33));
			state[31]=xk1ss-(xk1ss-state[31])*exp(-dt/txk1);
			rk1=1.0/(1.0+exp((state[0]+105.8-2.6*ko)/9.493));
			// rk1=1.0/(1.0+exp((state[0]+105.8-3.1*ko)/15.5)); //Ismail-Dom
			// GK1 = mK1*0.3816;
			GK1 = 0.1908;
			// GK1 = 0.4617897836*0.1908; //Ismail-Dom

			if ( m_celltype == LVEPI  or m_celltype == RVEPI ) {
				GK1*=1.2;
			}
			else if ( m_celltype == LVMCELL or m_celltype == RVMCELL ) {
				GK1*=1.3;
			}
			else if ( m_celltype == LVENDO ) {
				GK1*=1.0;
			}
			
			IK1=(1.0-qK1)*GK1*sqrt(ko)*rk1*state[31]*(state[0]-EK);
	        
			kna1=15.0;
			kna2=5.0;
			kna3=88.12;
			kasymm=12.5;

			wna=6.0e4;
			wca=6.0e4;
			wnaca=5.0e3;
			kcaon=1.5e6;
			kcaoff=5.0e3;
			qna=0.5224;
			qca=0.1670;
			hca=exp((qca*state[0]*F)/(R*T));
			hna=exp((qna*state[0]*F)/(R*T));
			h1=1+state[1]/kna3*(1+hna);
			h2=(state[1]*hna)/(kna3*h1);
			h3=1.0/h1;
			h4=1.0+state[1]/kna1*(1+state[1]/kna2);
			h5=state[1]*state[1]/(h4*kna1*kna2);
			h6=1.0/h4;
			h7=1.0+nao/kna3*(1.0+1.0/hna);
			h8=nao/(kna3*hna*h7);
			h9=1.0/h7;
			h10=kasymm+1.0+nao/kna1*(1.0+nao/kna2);
			h11=nao*nao/(h10*kna1*kna2);
			h12=1.0/h10;
			k1=h12*cao*kcaon;
			k2=kcaoff;
			k3p=h9*wca;
			k3pp=h8*wnaca;
			k3=k3p+k3pp;
			k4p=h3*wca/hca;
			k4pp=h2*wnaca;
			k4=k4p+k4pp;
			k5=kcaoff;
			k6=h6*state[5]*kcaon;
			k7=h5*h2*wna;
			k8=h8*h11*wna;
			x1=k2*k4*(k7+k6)+k5*k7*(k2+k3);
			x2=k1*k7*(k4+k5)+k4*k6*(k1+k8);
			x3=k1*k3*(k7+k6)+k8*k6*(k2+k3);
			x4=k2*k8*(k4+k5)+k3*k5*(k1+k8);
			E1=x1/(x1+x2+x3+x4);
			E2=x2/(x1+x2+x3+x4);
			E3=x3/(x1+x2+x3+x4);
			E4=x4/(x1+x2+x3+x4);
			KmCaAct=150.0e-6;
			allo=1.0/(1.0+pow(KmCaAct/state[5],2.0));
			zna=1.0;
			JncxNa=3.0*(E4*k7-E1*k8)+E3*k4pp-E2*k3pp;
			JncxCa=E2*k2-E1*k1;
			Gncx=2.95*mNCX*0.0008; //2.95 Mann et al.
			if ( m_celltype == LVEPI or m_celltype == RVEPI ) {
				Gncx*=1.1;
			}
			if ( m_celltype == LVMCELL or m_celltype == RVMCELL ) {
				Gncx*=1.4;
			}
			INaCa_i=0.8*Gncx*allo*(zna*JncxNa+zca*JncxCa);
	        
			h1=1+state[2]/kna3*(1+hna);
			h2=(state[2]*hna)/(kna3*h1);
			h3=1.0/h1;
			h4=1.0+state[2]/kna1*(1+state[2]/kna2);
			h5=state[2]*state[2]/(h4*kna1*kna2);
			h6=1.0/h4;
			h7=1.0+nao/kna3*(1.0+1.0/hna);
			h8=nao/(kna3*hna*h7);
			h9=1.0/h7;
			h10=kasymm+1.0+nao/kna1*(1+nao/kna2);
			h11=nao*nao/(h10*kna1*kna2);
			h12=1.0/h10;
			k1=h12*cao*kcaon;
			k2=kcaoff;
			k3p=h9*wca;
			k3pp=h8*wnaca;
			k3=k3p+k3pp;
			k4p=h3*wca/hca;
			k4pp=h2*wnaca;
			k4=k4p+k4pp;
			k5=kcaoff;
			k6=h6*state[6]*kcaon;
			k7=h5*h2*wna;
			k8=h8*h11*wna;
			x1=k2*k4*(k7+k6)+k5*k7*(k2+k3);
			x2=k1*k7*(k4+k5)+k4*k6*(k1+k8);
			x3=k1*k3*(k7+k6)+k8*k6*(k2+k3);
			x4=k2*k8*(k4+k5)+k3*k5*(k1+k8);
			E1=x1/(x1+x2+x3+x4);
			E2=x2/(x1+x2+x3+x4);
			E3=x3/(x1+x2+x3+x4);
			E4=x4/(x1+x2+x3+x4);
			KmCaAct=150.0e-6;
			allo=1.0/(1.0+pow(KmCaAct/state[6],2.0));
			JncxNa=3.0*(E4*k7-E1*k8)+E3*k4pp-E2*k3pp;
			JncxCa=E2*k2-E1*k1;
			INaCa_ss=0.2*Gncx*allo*(zna*JncxNa+zca*JncxCa);
	        
	        INaCa=INaCa_i+INaCa_ss;
	        
			k1p=949.5;
			k1m=182.4;
			k2p=687.2;
			k2m=39.4;
			k3p=1899.0;
			k3m=79300.0;
			k4p=639.0;
			k4m=40.0;
			Knai0=9.073;
			Knao0=27.78;
			delta=-0.1550;
			Knai=NaK_ISO*(Knai0*exp((delta*state[0]*F)/(3.0*R*T)));
			Knao=Knao0*exp(((1.0-delta)*state[0]*F)/(3.0*R*T));
			Kki=0.5;
			Kko=0.3582;
			MgADP=0.05;
			MgATP=9.8;
			Kmgatp=1.698e-7;
			H=1.0e-7;
			eP=4.2;
			Khp=1.698e-7;
			Knap=224.0;
			Kxkur=292.0;
			P_ORd=eP/(1.0+H/Khp+state[1]/Knap+state[3]/Kxkur);
			a1=(k1p*pow(state[1]/Knai,3.0))/(pow(1.0+state[1]/Knai,3.0)+pow(1.0+state[3]/Kki,2.0)-1.0);
			b1=k1m*MgADP;
			a2=k2p;
			b2=(k2m*pow(nao/Knao,3.0))/(pow(1.0+nao/Knao,3.0)+pow(1.0+ko/Kko,2.0)-1.0);
			a3=(k3p*pow(ko/Kko,2.0))/(pow(1.0+nao/Knao,3.0)+pow(1.0+ko/Kko,2.0)-1.0);
			b3=(k3m*P_ORd*H)/(1.0+MgATP/Kmgatp);
			a4=(k4p*MgATP/Kmgatp)/(1.0+MgATP/Kmgatp);
			b4=(k4m*pow(state[3]/Kki,2.0))/(pow(1.0+state[1]/Knai,3.0)+pow(1.0+state[3]/Kki,2.0)-1.0);
			x1=a4*a1*a2+b2*b4*b3+a2*b4*b3+b3*a1*a2;
			x2=b2*b1*b4+a1*a2*a3+a3*b1*b4+a2*a3*b4;
			x3=a2*a3*a4+b3*b2*b1+b2*b1*a4+a3*a4*b1;
			x4=b4*b3*b2+a3*a4*a1+b2*a4*a1+b3*b2*a1;
			E1=x1/(x1+x2+x3+x4);
			E2=x2/(x1+x2+x3+x4);
			E3=x3/(x1+x2+x3+x4);
			E4=x4/(x1+x2+x3+x4);
			zk=1.0;
			JnakNa=3.0*(E1*a3-E2*b3);
			JnakK=2.0*(E4*b1-E3*a1);
			Pnak=9.12*mNaK*30; //9.12 Mann et al.
			if ( m_celltype == LVEPI or m_celltype == RVEPI) {
				Pnak*=0.9;
			}
			if ( m_celltype == LVMCELL or m_celltype == RVMCELL ) {
				Pnak*=0.7;
			}
			INaK=Pnak*(zna*JnakNa+zk*JnakK);
	        
			xkb=1.0/(1.0+exp(-(state[0]-14.48)/18.34));
			GKb=mKb*0.003;
			IKb=GKb_ISO*GKb*xkb*(state[0]-EK);
	        
			PNab=3.75e-10;
			INab=PNab*vffrt*(state[1]*exp(vfrt)-nao)/(exp(vfrt)-1.0);
	        
			PCab=2.5e-8;
			ICab=PCab*4.0*vffrt*(state[5]*exp(2.0*vfrt)-0.341*cao)/(exp(2.0*vfrt)-1.0);
	        
			GpCa=mCaP*0.0005;

	    IpCa=GpCa*state[5]/(0.0005+state[5]);


      CaMKb=CaMKo*(1.0-state[34])/(1.0+KmCaM/state[6]);
			CaMKa = ( CaMKb+state[34] );
			state[34]+=dt*(aCaMK*CaMKb*(CaMKb+state[34])-bCaMK*state[34]);
	        
			JdiffNa=(state[2]-state[1])/2.0;
			JdiffK=(state[4]-state[3])/2.0;
			Jdiff=(state[6]-state[5])/0.2;
	        
			bt=4.75;
			a_rel=A_rel_ISO*0.5*bt;
			Jrel_inf=a_rel*(-ICaL)/(1.0+pow(1.5/state[8],8.0));
			if ( m_celltype == LVMCELL or m_celltype == RVMCELL ) {
				Jrel_inf*=1.7;
			}
			tau_rel=tau_rel_ISO*bt/(1.0+0.0123/state[8]);
			if (tau_rel<0.005) {
				tau_rel=0.005;
			}
			state[32]=Jrel_inf-(Jrel_inf-state[32])*exp(-dt/tau_rel);
			btp=1.25*bt;
			a_relp=A_rel_ISO*0.5*btp;
			Jrel_infp=a_relp*(-ICaL)/(1.0+pow(1.5/state[8],8.0));
			if ( m_celltype == LVMCELL or m_celltype == RVMCELL ) {
				Jrel_infp*=1.7;
			}
			tau_relp=tau_rel_ISO*btp/(1.0+0.0123/state[8]);
			if (tau_relp<0.005) {
				tau_relp=0.005;
			}
			state[33]=Jrel_infp-(Jrel_infp-state[33])*exp(-dt/tau_relp);
			fJrelp=(1.0/(1.0+KmCaMK/CaMKa));
			Jrel=mJrel*((1.0-fJrelp)*state[32]+fJrelp*state[33]);
	        
			Jupnp=0.004375*state[5]/(state[5]+0.00092*Jup_ISO);
			Jupp=2.75*0.004375*state[5]/(state[5]+(0.00092-0.00017)*Jup_ISO);
			if ( m_celltype == LVEPI  or m_celltype == RVEPI ) {
				Jupnp*=1.3;
				Jupp*=1.3;
			}
			fJupp=(1.0/(1.0+KmCaMK/CaMKa));
			Jleak=mJleak*0.0039375*state[7]/15.0;
			
	        Jup=mJup*( (1.0-fJupp)*Jupnp+fJupp*Jupp-Jleak );
	        
			Jtr=(state[7]-state[8])/100.0;
	        
			state[1]+=dt*(-(INa+INaL+3.0*INaCa_i+3.0*INaK+INab)*Acap/(F*vmyo)+JdiffNa*vss/vmyo);
			//=======================================================================================
	        
			state[2]+=dt*(-(ICaNa+3.0*INaCa_ss)*Acap/(F*vss)-JdiffNa);
	        
			//=======================================================================================
			state[3]+=dt*(-(Ito+IKr+IKs+IK1+IKb+Ist-2.0*INaK)*Acap/(F*vmyo)+JdiffK*vss/vmyo);
			//=======================================================================================
	        
			state[4]+=dt*(-(ICaK)*Acap/(F*vss)-JdiffK);
	        
			kmtrpn_cell = kmtrpn*kmtrpn_ISO;
			if ( m_celltype == LVEPI  or m_celltype == RVEPI ) {
				Bcai=1.0/(1.0+1.3*cmdnmax*kmcmdn/pow(kmcmdn+state[5],2.0)+trpnmax*kmtrpn_cell/pow(kmtrpn_cell+state[5],2.0));
			}
			else {
				Bcai=1.0/(1.0+cmdnmax*kmcmdn/pow(kmcmdn+state[5],2.0)+trpnmax*kmtrpn_cell/pow(kmtrpn_cell+state[5],2.0));
			}
	        
	        //=======================================================================================
			state[5]+=dt*( (Bcai*(-(IpCa+ICab-2.0*INaCa_i )*Acap/(2.0*F*vmyo)-Jup*vnsr/vmyo+Jdiff*vss/vmyo ) )   );
			//=======================================================================================
	        
			Bcass=1.0/(1.0+BSRmax*KmBSR/pow(KmBSR+state[6],2.0)+BSLmax*KmBSL/pow(KmBSL+state[6],2.0));
			state[6]+=dt*(Bcass*(-(ICaL-2.0*INaCa_ss)*Acap/(2.0*F*vss)+Jrel*vjsr/vss-Jdiff));
	        
			state[7]+=dt*(Jup-Jtr*vjsr/vnsr);
	        
			Bcajsr=1.0/(1.0+csqnmax*kmcsqn/pow(kmcsqn+state[8],2.0));
			state[8]+=dt*(Bcajsr*(Jtr-Jrel));


			// for(unsigned i=0; i<54; i++)
			// {
			// 	Variable_Derivatives[i] = (state[i+1] - Variables[i])/dt;
			// }
			// Iion = -( INa+INaL+Ito+ICaL+ICaNa+ICaK+IKr+IKs+IK1+INaCa+INaK+INab+IKb+IpCa+ICab+Ist );
			state[0] += -dt*( INa+INaL+Ito+ICaL+ICaNa+ICaK+IKr+IKs+IK1+INaCa+INaK+INab+IKb+IpCa+ICab+Ist ); 
		}

		void get_output(double *state, double *out)
		{

		}

	private:

		TypeCell celltype;


		// double state[55];

		double current[20];

    bool m_ISO;
    double m_DISO, m_QNDN;
    //========================
    // Electrophysiology Model
    //========================
    //=====================================
		// PARAMETERS FOR STIMULATION PROTOCOLS
		//=====================================
		double stimduration;
		double stimstrength;
		double tbegin;
		double tend;
		int beat_counter;
		double basicperiod;
		double basicapd;
		double time;
		
		// double zmin, zmax;
		// double x_coord, y_coord, z_coord;
		// bool m_purkinje;
		// double dia;	// Diastolic Interval
		// double CL;//pacing cycle length
		// double ft;//final time
		// int skip;//number of timesetps to skip in sampling of data in output file
		// double safetime;//time from the beginning of each beat during which dt is fixed to small values
		// double beatssave;//number of beats to save in the output
		// double repeats;
	    
		// double amp;//stimulus amplitude in uA/uF
		// double start;//start time of the stimulus, relative to each beat
		// double duration;//duration of teh stimulus in ms
	    
		//int celltype;  //endo = 0, epi = 1, M = 2
		MutantType m_mutant;
		unsigned m_celltype;
		double gkr, gks, gcal;

		// char filename_apdr[100], filename_out[150], filename_Y[80], filename_ICs[80];
		// FILE * APDR, * output, * scale_factors, * Y, * ICs;
		// std::string region;
		std::string mutation;
		
		// double state[STATE_LEN];
		double v;
		
		double wt_dO;									/* Markov Model - dOpen Probability for IKr */
		double wt_dC1;									/* Markov Model - dC1 Probability for IKr */
		double wt_dC2;									/* Markov Model - dC2 Probability for IKr */
		double wt_dC3;									/* Markov Model - dC3 Probability for IKr */
		double wt_dI;									/* Markov Model - dI Probability for IKr */
		double wt_d_drugO, wt_d_drugI;

		double wt_a1;									/* C1->O or C1->I */
		double wt_a2;									/* C2->C1 */
		double wt_a;									/* C3->C2 */
		double wt_b;									/* C2->C3 */
		double wt_b1;									/* C1->C2 */
		double wt_b2;									/* O->C1 */
		double wt_ai;									/* I->O */
		double wt_bi;									/* O->I */
		double wt_mu;
		double wt_ki, wt_li, wt_ko, wt_lo;

		double mt_dO;									/* Markov Model - dOpen Probability for IKr */
		double mt_dC1;									/* Markov Model - dC1 Probability for IKr */
		double mt_dC2;									/* Markov Model - dC2 Probability for IKr */
		double mt_dC3;									/* Markov Model - dC3 Probability for IKr */
		double mt_dI;									/* Markov Model - dI Probability for IKr */
		double mt_d_drugO, mt_d_drugI;

		double mt_a1;									/* C1->O or C1->I */
		double mt_a2;									/* C2->C1 */
		double mt_a;									/* C3->C2 */
		double mt_b;									/* C2->C3 */
		double mt_b1;									/* C1->C2 */
		double mt_b2;									/* O->C1 */
		double mt_ai;									/* I->O */
		double mt_bi;									/* O->I */
		double mt_mu;
		double mt_ki, mt_li, mt_ko, mt_lo;

		//constants
		double nao;//extracellular sodium in mM
		double cao;//extracellular calcium in mM
		double ko;//extracellular potassium in mM
	    
		//buffer paramaters
		double BSRmax;
		double KmBSR;
		double BSLmax;
		double KmBSL;
		double cmdnmax;
		double kmcmdn;
		double trpnmax;
		double kmtrpn,kmtrpn_cell;
		double csqnmax;
		double kmcsqn;
	    
		//CaMK paramaters
		double aCaMK;
		double bCaMK;
		double CaMKo;
		double KmCaM;
		double KmCaMK;
	    
		//physical constants
		double R;
		double T;
		double F;
	    
		//cell geometry
		double L;
		double rad;
		double vcell;
		double Ageo;
		double Acap;
		double vmyo;
		double vmito;
		double vsr;
		double vnsr;
		double vjsr;
		double vss;
	    
		//introduce varaibles for reversal potentials, currents, fluxes, and CaMK
		double ENa,EK,EKs;
		double INa,INaL,Ito,ICaL,ICaNa,ICaK,IKr,IKs,wt_IKs,mt_IKs,IK1,INaCa_i,INaCa_ss,INaCa,INaK,IKb,INab,IpCa,ICab,Ist;
		double Jrel,Jup,Jtr,Jdiff,JdiffNa,JdiffK,Jleak;
		double CaMKa,CaMKb;
		double wt_IKr,mt_IKr;
	    
		// //introduce APD, timing, and counting parameters
		// double APA;
		// int APD_flag;
		// double APD;
		// double APD90, APD50, APD30, APD30_2, APD_start, MDP, TI;
		// int countr, apd_count;
		// double v_max, v_min;
		// double peak, baseline;
		// bool APD30_double;
		// int APD_count = 0;
		// double dVdt, dVdtmax;
		// float timeAPDstart;
		// double t_vdot_max;
		// double vdot_old;
		// double vdot;
		// double vdot_max;
		// double vrest;
		// double vo;
		// double dt;
		// double t0;
		// double t;
		// int p;
		// int n;
		// int count;
	    
		//value holders for state variables in the case that the increase in dt was too aggressive, so a smaller one can be taken
		double  nai0,nass0,ki0,kss0,cai0,cass0,cansr0,cajsr0,m0,hf0,hs0,jO,hsp0,jp0,mL0,hL0,hLp0,a0,iF0,iS0,ap0,iFp0,iSp0,d0,ff0,fs0,fcaf0,fcas0,jca0,nca0,ffp0,fcafp0,xrf0,xrs0,xs10,xs20,xk10,Jrelnp0,Jrelp0,CaMKt0;
	    
	  // int m_numIntegrationSteps;
	    
		double vffrt;
		double vfrt;
		double ffrt;
		double k;

		double mLss;
		double tmL;
		double hLss;
		double thL;;
		double hLssp;
		double thLp;
		double GNaL;
		double fINaLp;
		double ass;
		double ta;
		double iss;
		double delta_epi;
		double tiF;
		double tiS;
		double AiF;
		double AiS;
		double i;
		double assp;
		double dti_develop;
		double dti_recover;
		double tiFp;
		double tiSp;;
		double ip;
		double Gto;
		double fItop;
		double dss;
		double td;
		double fss;
		double tff;
		double tfs;
		double Aff;
		double Afs;;
		double f;
		double fcass;
		double tfcaf;
		double tfcas;
		double Afcaf;
		double Afcas;;
		double fca;
		double tjca;
		double tffp;
		double fp;
		double tfcafp;
		double fcap;
		double Kmn;
		double k2n;
		double km2n;
		double anca;
		double PhiCaL;
		double PhiCaNa;
		double PhiCaK;
		double zca;
		double PCa;
		double PCap;
		double PCaNa;
		double PCaK;
		double PCaNap;
		double PCaKp;
		double fICaLp;
		double xrss;
		double txrf;
		double txrs;
		double Axrf;
		double Axrs;
		double xr;
		double rkr;
		double GKr;
		double xs1ss;
		double txs1;;
		double xs2ss;
		double txs2;
		double KsCa;
		double GKs;
		double xk1ss;
		double txk1;
		double rk1;
		double GK1;
		double kna1;
		double kna2;
		double kna3;
		double kasymm;
		double wna;
		double wca;
		double wnaca;
		double kcaon;
		double kcaoff;
		double qna;
		double qca;
		double hca;
		double hna;
		double h1;
		double h2;
		double h3;
		double h4;
		double h5;
		double h6;
		double h7;
		double h8;
		double h9;
		double h10;
		double h11;
		double h12;
		double k1;
		double k2;
		double k3p;
		double k3pp;
		double k3;
		double k4p;
		double k4pp;
		double k4;
		double k5;
		double k6;
		double k7;
		double k8;
		double x1;
		double x2;
		double x3;
		double x4;
		double E1;
		double E2;
		double E3;
		double E4;
		double KmCaAct;
		double allo;
		double zna;
		double JncxNa;
		double JncxCa;
		double Gncx;
		double k1p;
		double k1m;
		double k2p;
		double k2m;
		double k3m;
		double k4m;
		double Knai0;
		double Knao0;
		double delta;
		double Knai;
		double Knao;
		double Kki;
		double Kko;
		double MgADP;
		double MgATP;
		double Kmgatp;
		double H;
		double eP;
		double Khp;
		double Knap;
		double Kxkur;
		double P_ORd;
		double a1;
		double b1;
		double a2;
		double b2;
		double a3;
		double b3;
		double a4;
		double b4;
		double zk;
		double JnakNa;
		double JnakK;
		double Pnak;
		double xkb;
		double GKb;
		double PNab;
		double PCab;
		double GpCa;
		//double CaMKb;
		double bt;
		double a_rel;
		double Jrel_inf;
		double tau_rel;
		double btp;
		double a_relp;
		double Jrel_infp;
		double tau_relp;
		double fJrelp;
		double Jupnp;
		double Jupp;
		double fJupp;
		double Bcai;
		double Bcass;
		double Bcajsr;

		//TNNP/CRN INa
		double TAU_H;
		double TAU_J;
		double AM, BM, TAU_M;
		double tm_TNNP;
		double M_INF, H_INF, J_INF;
		double AH_1, AH_2;
		double BH_1, BH_2;
		double AJ_1, AJ_2;
		double BJ_1, BJ_2;
		double GNa_TNNP;
		double GNa_CRN;
		double ka, la, ki, li, kc, lc;
		double drug;

		//ISO
		double INah_half, INa_CaMh_half, GNa_ISO;
		double ICaLd_half, ICaLf_half, Pca_ISO;
		double Tau_ICaL_ff_ISO;
		double Tau_Ks, GKs_ISO, IKs_ac_shift_ISO;
		double NaK_ISO;
		double GKb_ISO;
		double A_rel_ISO, tau_rel_ISO;
		double Jup_ISO;
		double kmtrpn_ISO;
		double value_1;
		double value_2;

		//DISO (Disopyramide)
		double fKr, fKr_WT, fKr_N588K, fKr_AWT, fKr_T618I, fNa, fCaL, fTo, fKs; 

		//QNDN (Quinidine)
		double qKr, qKr_WT, qKr_N588K, qNa, qCaL, qKs, qTo, qK1, qNaL;

		//PLSR scaling factors
		double mNa, mNaL, mTo, mCaL, mKr;
		double mKs, mNCX, mK1, mCaP, mNaK;
		double mKb, mJrel, mJleak, mJup;

	};

}

#endif