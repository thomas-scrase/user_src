#ifndef OOMPH_ISMAIL_TNNP06_VENT_HEADER
#define OOMPH_ISMAIL_TNNP06_VENT_HEADER


// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif
	
#include "../cell_models/cell_model_base.h"

namespace oomph{

// namespace ISMAIL_TT
// {
// 	template <typename T> int sgn( T val )
// 	{
// 		return (val > T(0)) - (val < T(0));
// 	}
// };

class IsmailTNNP06 : public CellModelBaseFullySegregated
{
public:
	IsmailTNNP06();

	~IsmailTNNP06();

	double return_initial_state_variable(const unsigned &v, const unsigned &cell_type);

	double return_initial_membrane_potential(const unsigned &cell_type);


	void Calculate_Derivatives(const Boost_State_Type &Variables,
														const double &t,
														const unsigned &cell_type,
														const double &Istim,
														const Vector<double> &Other_Parameters,
														const Vector<double> &Other_Variables,
														Vector<double> &Variable_Derivatives,
														double &Iion);


	void get_optional_output(const Boost_State_Type &Variables,
													const double &t,
													const unsigned &cell_type,
													const double &Istim,
													const Vector<double> &Other_Parameters,
													const Vector<double> &Other_Variables,
													Vector<double> &Out);

	enum Cell_Variables_Enum : unsigned
	{
		sm_tt,
		sh_tt,
		sj_tt,
		
		// sxr1_tt,
		// sxr2_tt,
		
		sqt1_O_tt,
		sqt1_C1_tt,
		sqt1_C2_tt,
		sqt1_C3_tt,
		sqt1_I_tt,

		sxs_tt,
		ss_tt,
		sr_tt,
		sd_tt,
		sf_tt,
		sf2_tt,
		sfcass_tt,
		sRR_tt,
		// sOO_tt,
		Cai_tt,
		CaSR_tt,
		CaSS_tt,
		mNaL_tt,
		hNaL_tt,
		Nai_tt,
		Ki_tt,
		N_NoXB_tt,
		N_tt,
		P_NoXB_tt,
		P_tt,
		XBprer_tt,
		XBpostr_tt,
		SL_tt,
		xXBpostr_tt,
		xXBprer_tt,
		TropCaL_tt,
		TropCaH_tt,
		intf0_tt
	};
	enum Other_Parameters_Enum : unsigned
	{
		ZIndex_TT
	};

	enum TypeCell { EPI, MCELL, ENDO };
		

protected:
	
	double sign(double a){ return ((a) < (0.) ? (-1.0) : (1.0));}
	double heav(double a){ return ((a) < (0.) ? (0.0) : (1.0));}


	double m_epiMidRatio;
	double m_mutant;
	// TypeCell m_celltype;
	
	//External concentrations
	double Ko;
	double Cao;
	double Nao;
	
	//Intracellular volumes
	double Vc;
	double Vsr;
	double Vss;
	
	//Calcium buffering dynamics
	double Bufc;
	double Kbufc;
	double Bufsr;
	double Kbufsr;
	double Bufss;
	double Kbufss;
	
	//Intracellular calcium flux dynamics
	double Vmaxup;
	double Kup;
	double Vrel;
	double k1_;
	double k2_;
	double k3;
	double k4;
	double EC;
	double maxsr;
	double minsr;
	double Vleak;
	double Vxfer;	
	
	//Constants
	double R;
	double F;
	double T;
	double RTONF;
	
	//Cellular capacitance         
	double CAPACITANCE;
	
	//Parameters for currents
	//Parameters for IKr
	double Gkr;
	
	//Parameters for Iks
	double pKNa;
	double Gks;
	
	//Parameters for Ik1
	double GK1;
	
	//Parameters for Ito
	double Gto;
	
	//Parameters for INa
	double GNa;
	
	//Parameters for IbNa
	double GbNa;
	
	//Parameters for INaK
	double KmK;
	double KmNa;
	double knak;
	
	//Parameters for ICaL
	double GCaL;
	
	//Parameters for IbCa
	double GbCa;
	
	//Parameters for INaCa
	double knaca;
	double KmNai;
	double KmCa;
	double ksat;
	double n;
	
	//Parameters for IpCa
	double GpCa;
	double KpCa;
	
	//Parameters for IpK;
	double GpK;
	
	
	//==========================
	// PARAMETER FOR INTEGRATION
	//==========================
	// double  m_HT; // time step
	
	//==================================
	// PARAMETERS FOR INITIAL CONDITIONS 
	//==================================
	//Initial values of state variables
	// double svolt;
	// double Cai;
	// double CaSR;
	// double CaSS;
	// double Nai;
	// double Ki;
	
	//==================================
	// PARAMETER FOR SIMULATION DURATION
	//==================================
	//duration of the simulation 
	//double STOPTIME=100000;
	
	//=====================================
	// PARAMETERS FOR STIMULATION PROTOCOLS 
	//=====================================	
	// double stimduration;
	// double stimstrength;
	// double tbegin;
	// double tend;
	// int counter;
	// double dia;
	// double basicperiod;
	// double basicapd;
	// int repeats;
	// double Istim;
	// double time;
	//double m_HT;
	
	//
	double IKr;
	double IKs;
	double IK1;
	double Ito;
	double INa;
	double IbNa;
	double ICaL;
	double IbCa;
	double INaCa;
	double IpCa;
	double IpK;
	double INaK;
	double Irel;
	double Ileak;
	double Iup;
	double Ixfer;
	double k1;
	double k2;
	double kCaSR;
	
	
	double dNai;
	double dKi;
	double dCai;
	double dCaSR;
	double dCaSS;
	double dRR;
	
	
	double Ek;
	double Ena;
	double Eks;
	double Eca;
	double CaCSQN;
	double bjsr;
	double cjsr;
	double CaSSBuf;
	double bcss;
	double ccss;
	double CaBuf;
	// double bc;
	double cc;
	double Ak1;
	double Bk1;
	double rec_iK1;
	double rec_ipK;
	double rec_iNaK;
	double AM;
	double BM;
	double AH_1;
	double BH_1;
	double AH_2;
	double BH_2;
	double AJ_1;
	double BJ_1;
	double AJ_2;
	double BJ_2;
	double M_INF;
	double H_INF;
	double J_INF;
	double TAU_M;
	double TAU_H;
	double TAU_J;
	double axr1;
	double bxr1;
	double axr2;
	double bxr2;
	double Xr1_INF;
	double Xr2_INF;
	double TAU_Xr1;
	double TAU_Xr2;
	double Axs;
	double Bxs;
	double Xs_INF;
	double TAU_Xs;
	double R_INF;
	double TAU_R;
	double S_INF;
	double TAU_S;
	double Ad;
	double Bd;
	double Cd;
	double Af;
	double Bf;
	double Cf;
	double Af2;
	double Bf2;
	double Cf2;
	double TAU_D;
	double D_INF;
	double TAU_F;
	double F_INF;
	double TAU_F2;
	double F2_INF;
	double TAU_FCaSS;
	double FCaSS_INF;
	
	
	double inverseVcF2;
	double inverseVcF;
	double inversevssF2;
	
	// double sm;
	// double sh;
	// double sj;
	// double sxr1;
	// double sxr2;
	// double sxs; 
	// double ss;  
	// double sr;
	// double sd;
	// double sf;
	// double sf2;
	// double sfcass;
	// double sRR;
	// double sOO;
	// double sItot;
	
	// // CVODE
	// int NEQ;
	// double T0;		// Initial time
	// double T1;		// First output time
	// double TMULT;
	// int NOUT;
	// double rtol;	// Scalar relative tolerance
	// double atol;	// Vector absolute tolerance
	// double TOUT;
	// double IOUT;
	
	// int flag, k;
	// N_Vector y, abstol;
	// void *cvode_mem;
	// double *data;
	// double *ropt;
	// long int *iopt;
	
	// Rice et al.
	//============
	// double N_NoXB;
	// double P_NoXB;
	// double N;
	// double P;
	// double XBprer;
	// double XBpostr;
	// double SL;
	// double xXBpostr;
	// double xXBprer;
	// double TropCaL;
	// double TropCaH; 
	// double intf0; 
	double kon, konT, koffL, koffLT, koffH, koffHT, Qkon, Qkoff;
	double sovr_ze, len_thick, sovr_cle, len_thin, len_hbare, len_sovr, SOVFThick, SOVFThin, perm, permtot, perm50, nperm, inprmt;
	double kn_p, kn_pT, Qkn_p, kp_n, kp_nT, Qkp_n, fapp, fappT, Qfapp, gapslmd, gslmod, gapp, gappT, Qgapp;
	double hfmd, hfmdc, x_0, hbmd, hbmdc, hfT, hf, Qhf, hbT, hb, Qhb;
	double gxbmd, gxbT, gxb, Qgxb, sigmap, sigman;
	double SSXBprer, SSXBpostr, Fnordv, kxb, force, active_force;
	double ppforce, PCon_t, PExp_t, SLrest, PCon_col, PExp_col, SLcol;
	bool /*singlecell,*//* SEon, SEon_LengthClamp,*/ myo /*,contraction, *//*Isovolume,*/ /*WholeHeart*/;
	double afterload, KSE, SLset, SLref, pulse_number, index, PreloadF;
	double dSLisolated, visc, massf, SLmin, SLmax, dSL, dtyf_prer, dtyf_postr, xPsi;
	double sovr_ze_dt, sovr_cle_dt, len_sovr_dt, SOVFThick_dt, SOVFThin_dt;
	double FrSBXB, FrSBXB_dt, TropToT, Trop_conc, TropToT_dt;
	double temp1, temp2, temp3, temp4, temp5, temp6, temp7, temp8, temp9, temp10, temp11, temp12, temp13;
	double temp14, temp15, temp16, temp17, temp18, temp19, temp20, temp21, temp22, temp23, temp24, temp25, temp26, temp27;
	double Betavl, A_0, Vref, Vwall, SigPrs, SigFmx, LVpress, iflow, Rchar, Cwind, ARTpset, Ra, dSLwholeheart, ARTpress;
	double LVV;
	
	//==========================
	//Markov Formulation for IKr
	//==========================
	// double sqt1_O;									/* Markov Model - Open Probability for IKr */
	// double sqt1_C1;									/* Markov Model - C1 Probability for IKr */
	// double sqt1_C2;									/* Markov Model - C2 Probability for IKr */
	// double sqt1_C3;									/* Markov Model - C3 Probability for IKr */
	// double sqt1_I;									/* Markov Model - I Probability for IKr */
	
	// double sqt1_dO;									/* Markov Model - dOpen Probability for IKr */
	// double sqt1_dC1;								/* Markov Model - dC1 Probability for IKr */
	// double sqt1_dC2;								/* Markov Model - dC2 Probability for IKr */
	// double sqt1_dC3;								/* Markov Model - dC3 Probability for IKr */
	// double sqt1_dI;									/* Markov Model - dI Probability for IKr */
	
	double sqt1_a1;									/* C1->O or C1->I */
	double sqt1_a2;									/* C2->C1 */
	double sqt1_a;									/* C3->C2 */
	double sqt1_b;									/* C2->C3 */
	double sqt1_b1;									/* C1->C2 */
	double sqt1_b2;									/* O->C1 */
	double sqt1_ai;									/* I->O */
	double sqt1_bi;									/* O->I */
	double sqt1_mu;
	
	double epi_factor, endo_factor, mcell_factor;
	
	//=====
	// INaL
	//=====
	double INaL;
	double GNaL;
	// double mNaL;
	// double hNaL;
	double alpha_mNaL;
	double beta_mNaL;
	double mNaL_INF;
	double hNaL_INF;
	double TAU_mNaL;
	double TAU_hNaL;        //600ms
	
	//=========================
	//Stretch-activated Channel
	//=========================
	double Isac, Isac_Na, Isac_K, Isac_Ca;
	double Esac;
	double Gsac, gsac;
	double pNa, pK, pCa, zna, zk, zca;
	double Ksac, alpha_sac, lambda_sac;
	double strain, strain_half_maximal, open_probability, slope_factor;
};


} //End namespace

#endif