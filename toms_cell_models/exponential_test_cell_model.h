#ifndef OOMPH_EXPONENTIAL_TEST_CELL_HEADER
#define OOMPH_EXPONENTIAL_TEST_CELL_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif

#include "../cell_models/cell_model_base.h"

namespace oomph
{
	class ExponentialTestCellModel : public CellModelBaseFullySegregated
	{
	public:
		ExponentialTestCellModel()
		{
			Cell_Model_Name = "ExponentialTestCellModel";

			//This cell is empty
			Names_Of_Cell_Variables = { "y" };
			Names_Of_Other_Parameters = { };
			Names_Of_Other_Variables = { };
			Names_Of_Output_Data = { };

			FinalizeConstruction();
		}

		~ExponentialTestCellModel(){ }

		double return_initial_state_variable(const unsigned &v, const unsigned &cell_type){return 0.0;}

		double return_initial_membrane_potential(const unsigned &cell_type){return 1.0;}

		void Calculate_Derivatives(const Boost_State_Type &Variables,
									const double &t,
									const unsigned &cell_type,
									const double &Istim,
									const Vector<double> &Other_Parameters,
									const Vector<double> &Other_Variables,
									Vector<double> &Variable_Derivatives,
									double &Iion)
		{
			Variable_Derivatives[0] = Variables[Num_Cell_Vars];
			Iion = -Variables[0];
		}

		void get_optional_output(const Boost_State_Type &Variables,
								const double &t,
								const unsigned &cell_type,
								const double &Istim,
								const Vector<double> &Other_Parameters,
								const Vector<double> &Other_Variables,
								Vector<double> &Out){ }
	};

}

#endif