//LIC// ====================================================================
//LIC// This file contains the storage enrichment elements
//LIC//   Used to add extra storage to elements, e.g. vector_expansion
//LIC//   and diffusion coefficient expansion.
//LIC//
//LIC//!!!!! Add point element to assign to active nodes in mesh
//LIC//====================================================================


#ifndef OOMPH_STORAGE_ENRICHMENT
#define OOMPH_STORAGE_ENRICHMENT

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif

//OOMPH-LIB headers
#include "../generic/nodes.h"
#include "../generic/oomph_utilities.h"
#include "../generic/Qelements.h"
#include "../generic/Telements.h"
#include "../generic/error_estimator.h"
#include "../generic/oomph_utilities.h"

namespace oomph
{

	template<unsigned NUM>
	class StorageEnrichmentEquations : public virtual FiniteElement
	{
	public:

		StorageEnrichmentEquations(){  }

    /// Broken copy constructor
   StorageEnrichmentEquations(
    const StorageEnrichmentEquations& dummy) 
    { 
     BrokenCopy::broken_copy("StorageEnrichmentEquations");
    } 
   
   /// Broken assignment operator
   void operator=(const StorageEnrichmentEquations&) 
    {
     BrokenCopy::broken_assign("StorageEnrichmentEquations");
    }

		
		//identify the indexes of the diffusion matrix data
		virtual inline unsigned min_index_storage_enrichment() const {return 0;}
		virtual inline unsigned max_index_storage_enrichment() const {return NUM;}

  /// Output with default number of plot points
   void output(std::ostream &outfile) 
    {
     unsigned nplot=5;
     output(outfile,nplot);
    }

    /// \short Output FE representation of soln: x,y,u or x,y,z,u at 
   /// nplot^DIM plot points
   void output(std::ostream &outfile, const unsigned &nplot);


   /// C_style output with default number of plot points
   void output(FILE* file_pt)
    {
     unsigned n_plot=5;
     output(file_pt,n_plot);
    }

   /// \short C-style output FE representation of soln: x,y,u or x,y,z,u at 
   /// n_plot^DIM plot points
   void output(FILE* file_pt, const unsigned &n_plot);


   /// Output exact soln: x,y,u_exact or x,y,z,u_exact at nplot^DIM plot points
   void output_fct(std::ostream &outfile, const unsigned &nplot, 
                   FiniteElement::SteadyExactSolutionFctPt 
                   exact_soln_pt);

   /// \short Output exact soln: x,y,u_exact or x,y,z,u_exact at 
   /// nplot^DIM plot points (dummy time-dependent version to 
   /// keep intel compiler happy)
   virtual void output_fct(std::ostream &outfile, const unsigned &nplot,
                           const double& time, 
    FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
    {
     throw OomphLibError(
      "There is no time-dependent output_fct() for Advection Diffusion elements",
      OOMPH_CURRENT_FUNCTION,
      OOMPH_EXCEPTION_LOCATION);
    }


		/// Add the element's contribution to its residual vector (wrapper)
   void fill_in_contribution_to_residuals(Vector<double> &residuals)
    {
     //Call the generic residuals function with flag set to 0 and using
     //a dummy matrix
     fill_in_generic_residual_contribution_storage_enrichment(
      residuals,GeneralisedElement::Dummy_matrix,
      GeneralisedElement::Dummy_matrix,0);
    }

   
   /// \short Add the element's contribution to its residual vector and 
   /// the element Jacobian matrix (wrapper)
   void fill_in_contribution_to_jacobian(Vector<double> &residuals,
                                     DenseMatrix<double> &jacobian)
    {
     //Call the generic routine with the flag set to 1
     fill_in_generic_residual_contribution_storage_enrichment(
      residuals,jacobian,GeneralisedElement::Dummy_matrix,1);
    }
   

   /// Add the element's contribution to its residuals vector,
   /// jacobian matrix and mass matrix
   void fill_in_contribution_to_jacobian_and_mass_matrix(
    Vector<double> &residuals, DenseMatrix<double> &jacobian, 
    DenseMatrix<double> &mass_matrix)
    {
     //Call the generic routine with the flag set to 2
     fill_in_generic_residual_contribution_storage_enrichment(residuals,
                                                    jacobian,mass_matrix,2);
    }

  protected:

    /// \short Shape/test functions and derivs w.r.t. to global coords at 
   /// local coord. s; return  Jacobian of mapping
   virtual double dshape_and_dtest_eulerian_storage_enrichment(const Vector<double> &s, 
                                                     Shape &psi, 
                                                     DShape &dpsidx, 
                                                     Shape &test, 
                                                     DShape &dtestdx) const=0;

   /// \short Shape/test functions and derivs w.r.t. to global coords at 
   /// integration point ipt; return  Jacobian of mapping
   virtual double dshape_and_dtest_eulerian_at_knot_storage_enrichment(
    const unsigned &ipt, 
    Shape &psi, 
    DShape &dpsidx,
    Shape &test, 
    DShape &dtestdx) 
    const=0;

   /// \short Add the element's contribution to its residual vector only 
   /// (if flag=and/or element  Jacobian matrix 
   virtual void fill_in_generic_residual_contribution_storage_enrichment(
    Vector<double> &residuals, DenseMatrix<double> &jacobian, 
    DenseMatrix<double> &mass_matrix, unsigned flag); 
	};



///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////



//======================================================================
/// \short QStorageEnrichmentElement elements are 
/// linear/quadrilateral/brick-shaped Advection Diffusion elements with 
/// isoparametric interpolation for the function.
//======================================================================
template <unsigned DIM, unsigned NUM, unsigned NNODE_1D>
 class QStorageEnrichmentElement : 
 public virtual QElement<DIM,NNODE_1D>,
 public virtual StorageEnrichmentEquations<NUM>
 {

private:

 /// \short Static array of ints to hold number of variables at 
 /// nodes: Initial_Nvalue[n]
 static const unsigned Initial_Nvalue;
 
  public:


 ///\short  Constructor: Call constructors for QElement and 
 /// Advection Diffusion equations
 QStorageEnrichmentElement() : QElement<DIM,NNODE_1D>(), 
  StorageEnrichmentEquations<NUM>()
  { }

 /// Broken copy constructor
 QStorageEnrichmentElement(
  const QStorageEnrichmentElement<DIM, NUM,NNODE_1D>&  dummy) 
  {BrokenCopy::broken_copy("QStorageEnrichmentElement");} 
 
 /// Broken assignment operator
 void operator=(const QStorageEnrichmentElement<DIM, NUM,NNODE_1D>&) 
  {BrokenCopy::broken_assign("QStorageEnrichmentElement");}

 /// \short  Required  # of `values' (pinned or dofs) 
 /// at node n
 inline unsigned required_nvalue(const unsigned &n) const 
  {return Initial_Nvalue;}

 /// \short Output function:  
 ///  x,y,u   or    x,y,z,u
 void output(std::ostream &outfile)
  {StorageEnrichmentEquations<NUM>::output(outfile);}

 /// \short Output function:  
 ///  x,y,u   or    x,y,z,u at n_plot^DIM plot points
 void output(std::ostream &outfile, const unsigned &n_plot)
  {StorageEnrichmentEquations<NUM>::output(outfile,n_plot);}


 /// \short C-style output function:  
 ///  x,y,u   or    x,y,z,u
 void output(FILE* file_pt)
  {StorageEnrichmentEquations<NUM>::output(file_pt);}

 ///  \short C-style output function:  
 ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
 void output(FILE* file_pt, const unsigned &n_plot)
  {StorageEnrichmentEquations<NUM>::output(file_pt,n_plot);}

 /// \short Output function for an exact solution:
 ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
 void output_fct(std::ostream &outfile, const unsigned &n_plot,
                 FiniteElement::SteadyExactSolutionFctPt 
                 exact_soln_pt)
  {StorageEnrichmentEquations<NUM>::output_fct(outfile,n_plot,exact_soln_pt);}


 /// \short Output function for a time-dependent exact solution.
 ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
 /// (Calls the steady version)
 void output_fct(std::ostream &outfile, const unsigned &n_plot,
                 const double& time,
                 FiniteElement::UnsteadyExactSolutionFctPt 
                 exact_soln_pt)
  {StorageEnrichmentEquations<NUM>::output_fct(outfile,n_plot,time,exact_soln_pt);}


protected:

 /// Shape, test functions & derivs. w.r.t. to global coords. Return Jacobian.
 inline double dshape_and_dtest_eulerian_storage_enrichment(
  const Vector<double> &s, 
  Shape &psi, 
  DShape &dpsidx, 
  Shape &test, 
  DShape &dtestdx) const;
 
 /// \short Shape, test functions & derivs. w.r.t. to global coords. at
 /// integration point ipt. Return Jacobian.
 inline double dshape_and_dtest_eulerian_at_knot_storage_enrichment(
  const unsigned& ipt,
  Shape &psi, 
  DShape &dpsidx, 
  Shape &test,
  DShape &dtestdx) 
  const;

};

//Inline functions:


//======================================================================
/// \short Define the shape functions and test functions and derivatives
/// w.r.t. global coordinates and return Jacobian of mapping.
///
/// Galerkin: Test functions = shape functions
//======================================================================
template<unsigned DIM, unsigned NUM, unsigned NNODE_1D>
double QStorageEnrichmentElement<DIM, NUM,NNODE_1D>::
 dshape_and_dtest_eulerian_storage_enrichment(const Vector<double> &s,
                                         Shape &psi, 
                                         DShape &dpsidx,
                                         Shape &test, 
                                         DShape &dtestdx) const
{
 //Call the geometrical shape functions and derivatives  
 double J = this->dshape_eulerian(s,psi,dpsidx);

 //Loop over the test functions and derivatives and set them equal to the
 //shape functions
 for(unsigned i=0;i<NNODE_1D;i++)
  {
   test[i] = psi[i]; 
   for(unsigned j=0;j<DIM;j++)
    {
     dtestdx(i,j) = dpsidx(i,j);
    }
  }
 
 //Return the jacobian
 return J;
}



//======================================================================
/// Define the shape functions and test functions and derivatives
/// w.r.t. global coordinates and return Jacobian of mapping.
///
/// Galerkin: Test functions = shape functions
//======================================================================
template<unsigned DIM, unsigned NUM, unsigned NNODE_1D>
double QStorageEnrichmentElement<DIM, NUM,NNODE_1D>::
 dshape_and_dtest_eulerian_at_knot_storage_enrichment(
 const unsigned &ipt,
 Shape &psi, 
 DShape &dpsidx,
 Shape &test, 
 DShape &dtestdx) const
{
 //Call the geometrical shape functions and derivatives  
 double J = this->dshape_eulerian_at_knot(ipt,psi,dpsidx);

 //Set the test functions equal to the shape functions (pointer copy)
 test = psi;
 dtestdx = dpsidx;

 //Return the jacobian
 return J;
}


////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////



//=======================================================================
/// \short Face geometry for the QStorageEnrichmentElement elements: 
/// The spatial dimension of the face elements is one lower than that 
/// of the bulk element but they have the same number of points along 
/// their 1D edges.
//=======================================================================
template<unsigned DIM, unsigned NUM, unsigned NNODE_1D>
class FaceGeometry<QStorageEnrichmentElement<DIM, NUM,NNODE_1D> >: 
 public virtual QElement<DIM-1,NNODE_1D>
{

  public:
 
 /// \short Constructor: Call the constructor for the
 /// appropriate lower-dimensional QElement
 FaceGeometry() : QElement<DIM-1,NNODE_1D>() {}

};



////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////


//=======================================================================
/// Face geometry for the 1D QMonodomain elements: Point elements
//=======================================================================
template<unsigned NUM, unsigned NNODE_1D>
class FaceGeometry<QStorageEnrichmentElement<1,NUM,NNODE_1D> >: 
 public virtual PointElement
{

  public:
 
 /// \short Constructor: Call the constructor for the
 /// appropriate lower-dimensional QElement
 FaceGeometry() : PointElement() {}

};





/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// TStorageEnrichmentElement
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////



//======================================================================
/// \short TStorageEnrichmentElement elements are isoparametric triangular 
/// DIM-dimensional General Advection Diffusion Equations with  NNODE_1D nodal points along each
/// element edge. Inherits from TElement and AnisotropicSolidVectorExpansionEquations
//======================================================================
template <unsigned DIM, unsigned NUM, unsigned NNODE_1D>
 class TStorageEnrichmentElement : 
 public virtual TElement<DIM,NNODE_1D>,
 public virtual StorageEnrichmentEquations<NUM>
{

private:

 /// \short Static array of ints to hold number of variables at 
 /// nodes: Initial_Nvalue[n]
 static const unsigned Initial_Nvalue;
 
  public:


 ///\short  Constructor: Call constructors for TElement and 
 /// Advection Diffusion equations
 TStorageEnrichmentElement() : TElement<DIM,NNODE_1D>(), 
  StorageEnrichmentEquations<NUM>()
  { }

 /// Broken copy constructor
 TStorageEnrichmentElement(
  const TStorageEnrichmentElement<DIM, NUM,NNODE_1D>&  dummy) 
  { 
   BrokenCopy::broken_copy("TStorageEnrichmentElement");
  } 
 
 /// Broken assignment operator
 void operator=(const TStorageEnrichmentElement<DIM, NUM,NNODE_1D>&) 
  {
   BrokenCopy::broken_assign("TStorageEnrichmentElement");
  }

 /// \short  Required  # of `values' (pinned or dofs) 
 /// at node n
 inline unsigned required_nvalue(const unsigned &n) const 
  {return Initial_Nvalue;}

 /// \short Output function:  
 ///  x,y,u   or    x,y,z,u
 void output(std::ostream &outfile)
  {StorageEnrichmentEquations<NUM>::output(outfile);}

 /// \short Output function:  
 ///  x,y,u   or    x,y,z,u at n_plot^DIM plot points
 void output(std::ostream &outfile, const unsigned &n_plot)
  {StorageEnrichmentEquations<NUM>::output(outfile,n_plot);}


 /// \short C-style output function:  
 ///  x,y,u   or    x,y,z,u
 void output(FILE* file_pt)
  {
   StorageEnrichmentEquations<NUM>::output(file_pt);
  }

 ///  \short C-style output function:  
 ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
 void output(FILE* file_pt, const unsigned &n_plot)
  {
   StorageEnrichmentEquations<NUM>::output(file_pt,n_plot);
  }

 /// \short Output function for an exact solution:
 ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
 void output_fct(std::ostream &outfile, const unsigned &n_plot,
                 FiniteElement::SteadyExactSolutionFctPt 
                 exact_soln_pt)
  {StorageEnrichmentEquations<NUM>::output_fct(outfile,n_plot,exact_soln_pt);}


 /// \short Output function for a time-dependent exact solution.
 ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
 /// (Calls the steady version)
 void output_fct(std::ostream &outfile, const unsigned &n_plot,
                 const double& time,
                 FiniteElement::UnsteadyExactSolutionFctPt 
                 exact_soln_pt)
  {
   StorageEnrichmentEquations<NUM>::
    output_fct(outfile,n_plot,time,exact_soln_pt);
  }


protected:

 /// Shape, test functions & derivs. w.r.t. to global coords. Return Jacobian.
 inline double dshape_and_dtest_eulerian_storage_enrichment(
  const Vector<double> &s, 
  Shape &psi, 
  DShape &dpsidx, 
  Shape &test, 
  DShape &dtestdx) const;
 
 /// \short Shape, test functions & derivs. w.r.t. to global coords. at
 /// integration point ipt. Return Jacobian.
 inline double dshape_and_dtest_eulerian_at_knot_storage_enrichment(
  const unsigned& ipt,
  Shape &psi, 
  DShape &dpsidx, 
  Shape &test,
  DShape &dtestdx) 
  const;

};

//Inline functions:


//======================================================================
/// \short Define the shape functions and test functions and derivatives
/// w.r.t. global coordinates and return Jacobian of mapping.
///
/// Galerkin: Test functions = shape functions
//======================================================================
template<unsigned DIM, unsigned NUM, unsigned NNODE_1D>
double TStorageEnrichmentElement<DIM, NUM,NNODE_1D>::
 dshape_and_dtest_eulerian_storage_enrichment(const Vector<double> &s,
                                         Shape &psi, 
                                         DShape &dpsidx,
                                         Shape &test, 
                                         DShape &dtestdx) const
{
 //Call the geometrical shape functions and derivatives  
 double J = this->dshape_eulerian(s,psi,dpsidx);

 //Loop over the test functions and derivatives and set them equal to the
 //shape functions
 for(unsigned i=0;i<NNODE_1D;i++)
  {
   test[i] = psi[i]; 
   for(unsigned j=0;j<DIM;j++)
    {
     dtestdx(i,j) = dpsidx(i,j);
    }
  }
 
 //Return the jacobian
 return J;
}



//======================================================================
/// Define the shape functions and test functions and derivatives
/// w.r.t. global coordinates and return Jacobian of mapping.
///
/// Galerkin: Test functions = shape functions
//======================================================================
template<unsigned DIM, unsigned NUM, unsigned NNODE_1D>
double TStorageEnrichmentElement<DIM, NUM,NNODE_1D>::
 dshape_and_dtest_eulerian_at_knot_storage_enrichment(
 const unsigned &ipt,
 Shape &psi, 
 DShape &dpsidx,
 Shape &test, 
 DShape &dtestdx) const
{
 //Call the geometrical shape functions and derivatives  
 double J = this->dshape_eulerian_at_knot(ipt,psi,dpsidx);

 //Set the test functions equal to the shape functions (pointer copy)
 test = psi;
 dtestdx = dpsidx;

 //Return the jacobian
 return J;
}


////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////



//=======================================================================
/// \short Face geometry for the TStorageEnrichmentElement elements: 
/// The spatial dimension of the face elements is one lower than that 
/// of the bulk element but they have the same number of points along 
/// their 1D edges.
//=======================================================================
template<unsigned DIM, unsigned NUM, unsigned NNODE_1D>
class FaceGeometry<TStorageEnrichmentElement<DIM, NUM,NNODE_1D> >: 
 public virtual TElement<DIM-1,NNODE_1D>
{

  public:
 
 /// \short Constructor: Call the constructor for the
 /// appropriate lower-dimensional TElement
 FaceGeometry() : TElement<DIM-1,NNODE_1D>() {}

};



////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////


//=======================================================================
/// Face geometry for the 1D TStorageEnrichmentElement: Point elements
//=======================================================================
template<unsigned NUM, unsigned NNODE_1D>
class FaceGeometry<TStorageEnrichmentElement<1,NUM,NNODE_1D> >: 
 public virtual PointElement
{

  public:
 
 /// \short Constructor: Call the constructor for the
 /// appropriate lower-dimensional TElement
 FaceGeometry() : PointElement() {}

};

}	//end namespace

#endif

