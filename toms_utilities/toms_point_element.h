#ifndef TOMS_POINT_ELEMENT
#define TOMS_POINT_ELEMENT

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
	#include <oomph-lib-config.h>
#endif

#include "../generic/elements.h"

namespace oomph{

	class TomsPointElement : public virtual PointElement
	{
	public:
		//Stuff that should be implemented by point element but isn't

		/// \short Fill in the offset information for paraview plot.
		/// Needs to be implemented for each new geometric element type; see
		/// http://www.vtk.org/VTK/img/file-formats.pdf
		void write_paraview_output_offset_information(std::ofstream& file_out,
													const unsigned& nplot,
													unsigned& counter) const
		{
			file_out << counter << " " << 1+counter << std::endl;
		}

		/// \short Return the paraview element type.
		/// Needs to be implemented for each new geometric element type; see
		/// http://www.vtk.org/VTK/img/file-formats.pdf
		/// Use type "VTK_LINE" (== 3) for 2D quad elements
		void write_paraview_type(std::ofstream& file_out,
								const unsigned& nplot) const
		{
			file_out << "1" << std::endl;
		}

		/// \short Return the offsets for the paraview sub-elements. Needs 
		/// to be implemented for each new geometric element type; see
		/// http://www.vtk.org/VTK/img/file-formats.pdf
		void write_paraview_offsets(std::ofstream& file_out,
									const unsigned& nplot, 
									unsigned& offset_sum) const
		{
			// Loop over all local elements and add its offset to the overall offset_sum
			offset_sum+=1;
			file_out << offset_sum << std::endl;
		}


		unsigned nplot_points_paraview(const unsigned& nplot) const
		{
			return 1;
		}

		unsigned nsub_elements_paraview(const unsigned& nplot) const 
		{
			return 1;
		}

		void get_s_plot(const unsigned& i, const unsigned& nplot, Vector<double>& s) const
		{
			this->local_coordinate_of_node(0,s);
		}

		void get_s_plot(const unsigned& i, 
						const unsigned& nplot,
						Vector<double>& s,
						const bool& use_equally_spaced_interior_sample_points=false) const
		{
			//Makes no difference, this is a point element
			this->local_coordinate_of_node(0,s);
		}
		//End stuff that should be implemented by point element but isn't
	};

}

#endif