#ifndef OOMPH_DIFF_AUGMENTED_CELL
#define OOMPH_DIFF_AUGMENTED_CELL

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif

//OOMPH-LIB headers
#include "../generic/nodes.h"
#include "../generic/oomph_utilities.h"
#include "../generic/Qelements.h"
#include "../generic/Telements.h"
#include "../generic/error_estimator.h"
#include "../generic/oomph_utilities.h"

//Cell interface elements (includes cell models)
#include "../cell_interface/cell_interface_elements.h"


namespace oomph
{
	template<class CELL_ELEMENT>
	class DiffAugmentedCell	:	public virtual CELL_ELEMENT
	{
	public:
		DiffAugmentedCell()	:	CELL_ELEMENT()
		{
			unsigned dim = CELL_ELEMENT::dim();
			unsigned nnode = CELL_ELEMENT::nnode();

			Diffusion_Coefficients_Data.resize(nnode);
			Vector_Data.resize(nnode);

			for(unsigned i=0; i<nnode; i++){
				Diffusion_Coefficients_Data[i].resize(dim, 0.0);
				Vector_Data[i].resize(dim);
				for(unsigned j=0;j<dim;j++){
					Vector_Data[i][j].resize(dim, 0.0);
				}
			}
		}

		//Setter functions for vectors
		void set_preferential_vector_at_node(const unsigned &n,
											const unsigned &vect_ind,
											const Vector<double> &vector){
			Vector_Data[n][vect_ind] = vector;
		}

		//Getter function for vectors
		inline void get_preferential_vectors_at_node(const unsigned &n,
													DenseMatrix<double> &pref_vects) const {
			// std::cout << "Reporting preferential vectors at local node: " << n << std::endl;
			pref_vects.resize(CELL_ELEMENT::dim(),CELL_ELEMENT::dim());
			for(unsigned v=0; v<CELL_ELEMENT::dim(); v++){
				// std::cout << v << ":";
				for(unsigned d=0; d<CELL_ELEMENT::dim(); d++){
					pref_vects(d,v) = Vector_Data[n][v][d];
					// std::cout << "\t(" << d << ")" << pref_vects(d,v);
				}
				// std::cout << std::endl;
			}
		}

		inline void get_interpolated_preferential_vectors(const Vector<double> &s,
													DenseMatrix<double> &interpolated_preferential_vectors) const {
			//Get the interpolation weights
			unsigned n_node = CELL_ELEMENT::nnode();
			Shape psi(n_node);
			CELL_ELEMENT::shape(s, psi);
			//The vectors at the current node
			DenseMatrix<double> nodal_pref_vects;
			nodal_pref_vects.resize(CELL_ELEMENT::dim(), CELL_ELEMENT::dim());
			//The interpolated vectors to be returned

			interpolated_preferential_vectors.resize(CELL_ELEMENT::dim(), CELL_ELEMENT::dim());
			for(unsigned v=0; v<CELL_ELEMENT::dim(); v++){
					for(unsigned d=0; d<CELL_ELEMENT::dim(); d++){
						interpolated_preferential_vectors(d,v) = 0.0;
					}
				}

			for(unsigned l=0; l < n_node; l++){
				get_preferential_vectors_at_node(l, nodal_pref_vects);

				for(unsigned v=0; v<CELL_ELEMENT::dim(); v++){
					for(unsigned d=0; d<CELL_ELEMENT::dim(); d++){
						interpolated_preferential_vectors(d,v) += nodal_pref_vects(d,v)*psi[l];
					}
				}
			}

			// std::cout << "Reporting preferential vectors at local coord" << std::endl;
			// for(unsigned v=0; v<CELL_ELEMENT::dim(); v++){
			// 	std::cout << v << ":";
			// 	for(unsigned d=0; d<CELL_ELEMENT::dim(); d++){
			// 		std::cout << "\t(" << d << ")" << interpolated_preferential_vectors(d,v);
			// 	}
			// 	std::cout << std::endl;
			// }

		}

		//Setter function for diffusion coefficients
		void set_diffusion_coefficients_at_node(const unsigned &node,
												const Vector<double> &diff_coeffs){
			Diffusion_Coefficients_Data[node] = diff_coeffs;
		}
		
		//Getter function for diffusion coefficients
		inline void get_diffusion_coefficients_at_node(const unsigned &n,
														Vector<double> &diff_coeffs) const {
			diff_coeffs = Diffusion_Coefficients_Data[n];

			// std::cout << "Reporting diffusion coefficients at node: " << n << std::endl;
			// for(unsigned d=0; d<CELL_ELEMENT::dim(); d++){
			// 	std::cout << "\t(" << d << ")" << diff_coeffs[d];
			// }
			// std::cout << std::endl;

		}

		inline void get_interpolated_diffusion_coefficients(const Vector<double> &s,
															Vector<double> &interpolated_diff_coeffs) const {
			//Get the interpolation weights
			unsigned n_node = CELL_ELEMENT::nnode();
			Shape psi(n_node);
			CELL_ELEMENT::shape(s, psi);
			//The vectors at the current node
			Vector<double> nodal_diff_coeffs(CELL_ELEMENT::dim());
			//The interpolated vectors to be returned
			interpolated_diff_coeffs.resize(CELL_ELEMENT::dim());

			for(unsigned d=0; d<CELL_ELEMENT::dim(); d++){
					interpolated_diff_coeffs[d] = 0.0;
				}

			for(unsigned l=0; l < n_node; l++){
				get_diffusion_coefficients_at_node(l, nodal_diff_coeffs);
				for(unsigned d=0; d<CELL_ELEMENT::dim(); d++){
					interpolated_diff_coeffs[d] += nodal_diff_coeffs[d]*psi[l];
				}
			}

			// std::cout << "Reporting diffusion coefficients at local coord" << std::endl;
			// for(unsigned d=0; d<CELL_ELEMENT::dim(); d++){
			// 	std::cout << "\t(" << d << ")" << interpolated_diff_coeffs[d];
			// }
			// std::cout << std::endl;

		}

		//Getter function for diffusion matrix
		inline void get_interpolated_diffusion_matrix(const Vector<double> &s,
													DenseMatrix<double> &diff_matrix){
			DenseMatrix<double> interpolated_preferential_vectors;
			Vector<double> interpolated_diff_coeffs;
			get_interpolated_preferential_vectors(s, interpolated_preferential_vectors);
			get_interpolated_diffusion_coefficients(s, interpolated_diff_coeffs);

			diff_matrix.resize(CELL_ELEMENT::dim(),CELL_ELEMENT::dim());

			for(unsigned i=0; i<CELL_ELEMENT::dim(); i++){
				for(unsigned j=0; j<CELL_ELEMENT::dim(); j++){
					for(unsigned v=0; v<CELL_ELEMENT::dim(); v++){
						diff_matrix(i,j) += interpolated_preferential_vectors(i,v)*
															interpolated_preferential_vectors(j,v)*
															interpolated_diff_coeffs[v];
					}
				}
			}
		}


	private:

		Vector<Vector<double>> Diffusion_Coefficients_Data;

		Vector<Vector<Vector<double>>> Vector_Data;
	};

}

#endif