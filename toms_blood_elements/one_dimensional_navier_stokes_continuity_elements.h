#ifndef OOMPH_ONE_DIMENSIONAL_NAVIER_STOKES_CONTINUITY_ELEMENT_HEADER
#define OOMPH_ONE_DIMENSIONAL_NAVIER_STOKES_CONTINUITY_ELEMENT_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
	#include <oomph-lib-config.h>
#endif

namespace oomph{

//Provides continuity between various toms blood elements
// Contains functions for returning output pressure(s) and current(s)
// Contains ability to store pointers to other
//	OneDimensionalNavierStokesContinuityElement so their output functions
//	can be used as inputs.

// All of toms blood elements inherit from this element to allow for interfacing
//	between 1d lumped parameter and fem models.

//!!!!! At some point maybe have this be a special case of a more general
//		ns continuity element which allows for a local coordinate to also
//		be passed. 1d element will then ignore this coordinate.
class OneDimensionalNavierStokesContinuityElement{
 public:
 	OneDimensionalNavierStokesContinuityElement();

 	//get pressure of the n_out-th output
 	virtual void get_output_pressure(double &p, const unsigned &n_out=0);

 	//get current of the n_out-th output
 	virtual void get_output_current(double &q, const unsigned &n_out=0);

 	//return a reference to pointer to the input element
 	OneDimensionalNavierStokesContinuityElement* &input_element_pt()
 		{return Input_Element_Pt;}


 	//!!!!! This will be rewritten if multiple input elements are to be used
 	//get the pressure from the n_out-th output of the input element
 	void get_input_pressure(double &p, const unsigned *n_out=0){
 		Input_Element_Pt->get_output_pressure(p,n_out);
 	}

 	//get the current from the n_out-th output of the input element
 	void get_input_current(double &q, const unsigned *n_out=0){
 		Input_Element_Pt->get_output_output(q,n_out);
 	}

 private:

 	OneDimensionalNavierStokesContinuityElement* Input_Element_Pt;
};

}

#endif