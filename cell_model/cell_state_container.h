//LIC// ====================================================================
//LIC// Contains the CellState container object for passing data to
//LIC//  CellModelBase from CellInterfaceEquations.
//LIC//
//LIC// Lots of PARANOID checks exist to make sure that the cell model passed
//LIC//  in construction (presumably the one I am being passed to) has requested
//LIC//  the specified variable, if it hasn't then we can assume the variable is
//LIC//  still NULL and horrible things will happen if it i used in calculation.
//LIC// ====================================================================

#ifndef OOMPH_CELL_STATE_CONTAINER_HEADER
#define OOMPH_CELL_STATE_CONTAINER_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
	#include <oomph-lib-config.h>
#endif

#include "../generic/oomph_utilities.h"
#include "../generic/matrices.h"

namespace oomph{

	//A base Cell state class with all the access functions and member data.
	class CellState
	{
	public:
		//Empty constructor and destructor
		CellState();

		//vars
		void set_vars(const DenseMatrix<double> &new_vars); 
		double get_var(const unsigned &d, const unsigned &n) const ;

		//time_stepper_weights
		void set_time_stepper_weights(const DenseMatrix<double> &new_time_stepper_weights);
		double get_time_stepper_weight(const unsigned &d, const unsigned &n) const ;

		//cell_type
		void set_cell_type(const unsigned &new_cell_type);
		unsigned get_cell_type() const ;

		//Black-box nodal parameters
		void set_black_box_nodal_parameters(const Vector<double> &new_nodal_parameters);
		double get_black_box_nodal_parameters(const unsigned &paramter_index) const;

		//Trans-Membrane Potential
		void set_vm(const double &new_vm);
		double get_vm() const ;

		//Mechanical Strain
		void set_stress(const double &new_stress);
		double get_stress() const ;

		//Black-box external data
		void set_black_box_external_data(const Vector<double> &new_external_data);
		double get_black_box_external_data(const unsigned &data_index) const;

		////Explicit variables////////
		//Time step length
		void set_dt(const double &new_dt);
		double get_dt() const ;

		//Previous values
		void set_previous_variables(const Vector<double> &new_previous_variables);
		double get_previous_variables(const unsigned &n) const ;
		//////////////////////////////


		//Total Membrane current
		void set_membrane_current(const double &new_cell_membrane_current);
		double get_membrane_current() const ;

		//Generated active strain 
		void set_active_strain(const double &new_cell_model_strain);
		double get_active_strain() const ;

		//General cell model data - changed by the model during a run sequence.
		//	Allows for greater structuring of the cell model
		void set_new_general_cell_model_data(const double &new_data); //appends to the general cell model data
		void set_general_cell_model_data_index(const unsigned &data_index, const double &new_data); //change the value of a specific index general cell model data
		void resize_general_cell_model_data(const unsigned &new_size);	//resize the vector representing general cell model data
		double get_general_cell_model_data(const unsigned &data_index) const; //get the data at data_index
		const Vector<double>* general_cell_model_data() const; //Return a const pointer to the general cell model data

	private:
		//====================================================================
		//Variables to be stored and accessed
		//====================================================================

		DenseMatrix<double> Cell_Variables_And_Derivatives;

		DenseMatrix<double> Time_Stepper_Weights;

		unsigned Cell_Type;

		Vector<double> Black_Box_Nodal_Parameters;

		double Membrane_Potential;

		double Mechanical_Stress;

		Vector<double> Black_Box_External_Data;

		//Explicit cell model variables
		double Dt;
		Vector<double> Previous_Variables;


		double Membrane_Current;

		double Active_Strain;

		Vector<double> General_cell_model_data;
	};
}

#endif