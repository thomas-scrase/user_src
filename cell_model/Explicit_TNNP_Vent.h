#ifndef OOMPH_EXPLICIT_TNNP_VENT_HEADER
#define OOMPH_EXPLICIT_TNNP_VENT_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif

#include "cell_model_base.h"

namespace oomph{

	class ExplicitTNNPVent : public CellModelBase
	{
	public:
		ExplicitTNNPVent();

		void explicit_timestep(CellState &Cellstate, Vector<double> &new_state);

		bool compatible_cell_types(const unsigned& cell_type);

		inline void return_initial_membrane_potential(double &v, const unsigned &cell_type=0);
		inline bool return_initial_state_variable(const unsigned &n, double &v, const unsigned &cell_type);

		//this can be overloaded in case the membrane capacitance is dependent on cell type or state parameters
		inline double cm(CellState &state) {return TTCell_CAPACITANCE;}

		inline void custom_output(CellState &state, Vector<double> &output) override {}

		inline bool model_calculates_jacobian_entries() {return true;}

		inline unsigned Num_Variables(){return 25;}
		//the model does not require derivatives to be provided, it's
		//	explicit and calculates them itself
		inline unsigned required_derivatives(){return 0;}
		//The model has three black box parameters
		inline unsigned required_black_box_parameters(){return 3;}
		inline unsigned required_external_data() {return 0;}


		//a virtual function to extract black box nodal parameters from the cell state
		//	we implement this as virtual so that in the case this class is used in a
		//	combined cell model class. Then it can be overloaded so that black box nodal
		//	parameters associated with each model have a unique index
		virtual inline void extract_black_box_parameters_ExplicitTNNPVent(double &abindex,
																	double &isindex,
																	double &rvindex,
																	CellState &Cellstate);
	protected:
		// constants for Tent ventricle model
		//	from TNNP_MarkovIKr_function.h in haibo ni folders
		double TTCell_Ko;
		double TTCell_Cao;
		double TTCell_Nao;
		double TTCell_Vc;
		double TTCell_Vsr;
		double TTCell_Vss;
		double TTCell_Bufc;
		double TTCell_Kbufc;
		double TTCell_Bufsr;
		double TTCell_Kbufsr;
		double TTCell_Bufss;
		double TTCell_Kbufss;
		double TTCell_Vmaxup;
		double TTCell_Kup;
		double TTCell_Vrel;
		double TTCell_k1_;
		double TTCell_k2_;
		double TTCell_k3;
		double TTCell_k4;
		double TTCell_EC;
		double TTCell_maxsr;
		double TTCell_minsr;
		double TTCell_Vleak;
		double TTCell_Vxfer;
		double TTCell_R;
		double TTCell_F;
		double TTCell_T;
		double TTCell_CAPACITANCE;
		double TTCell_pKNa;
		double TTCell_GbNa;
		double TTCell_KmK;
		double TTCell_KmNa;
		double TTCell_knak;
		double TTCell_GCaL;
		double TTCell_GbCa;
		double TTCell_knaca;
		double TTCell_KmNai;
		double TTCell_KmCa;
		double TTCell_ksat;
		double TTCell_n;
		double TTCell_GpCa;
		double TTCell_KpCa;
		double TTCell_GpK;

		double TTCell_RTONF;
		double TTCell_inverseVcF2;
		double TTCell_inverseVcF;
		double TTCell_inversevssF2;

	};
}

#endif