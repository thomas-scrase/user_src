// Copyright (c) 2011-2015 by Thomas O'Hara, Yoram Rudy, 
//                            Washington University in St. Louis.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in the 
// documentation and/or other materials provided with the distribution.
// 
// 3. Neither the names of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from 
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
// IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
// PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
// HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF 
// USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//

// C++ Implementation of the O'Hara-Rudy dynamic (ORd) model for the
// undiseased human ventricular action potential and calcium transient
//
// The ORd model is described in the article "Simulation of the Undiseased
// Human Cardiac Ventricular Action Potential: Model Formulation and
// Experimental Validation"
// by Thomas O'Hara, Laszlo Virag, Andras Varro, and Yoram Rudy
//
// The article and supplemental materails are freely available in the
// Open Access jounal PLoS Computational Biology
// Link to Article:
// http://www.ploscompbiol.org/article/info:doi/10.1371/journal.pcbi.1002061
// 
// Email: tom.ohara@gmail.com / rudy@wustl.edu
// Web: http://rudylab.wustl.edu

#ifndef OOMPH_EXPLICIT_OHARARUDY_VENT_HEADER
#define OOMPH_EXPLICIT_OHARARUDY_VENT_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif

#include "cell_model_base.h"

namespace oomph{

	class ExplicitOHaraRudyVent : public CellModelBase
	{
	public:
		ExplicitOHaraRudyVent();

		void explicit_timestep(CellState &Cellstate, Vector<double> &new_state);

		bool compatible_cell_types(const unsigned& cell_type);

		inline void return_initial_membrane_potential(double &v, const unsigned &cell_type=0);
		inline bool return_initial_state_variable(const unsigned &n, double &v, const unsigned &cell_type);

		//this can be overloaded in case the membrane capacitance is dependent on cell type or state parameters
		inline double cm(CellState &state) {return 1.0;}

		inline void custom_output(CellState &state, Vector<double> &output) override {}

		inline bool model_calculates_jacobian_entries() {return true;}

		inline unsigned required_nodal_variables(const unsigned &cell_type=0){return 40;}

		//the model does not require derivatives to be provided, it's
		//	explicit and calculates them itself
		inline unsigned required_derivatives(){return 0;}
		//The model has three black box parameters
		inline unsigned required_black_box_parameters(){return 0;}
		inline unsigned required_external_data() {return 0;}


		//a virtual function to extract black box nodal parameters from the cell state
		//	we implement this as virtual so that in the case this class is used in a
		//	combined cell model class. Then it can be overloaded so that black box nodal
		//	parameters associated with each model have a unique index
		virtual inline void extract_black_box_parameters_ExplicitOHaraRudyVent(double &abindex,
																				double &isindex,
																				double &rvindex,
																				CellState &Cellstate);

		//Set the temperature of the model
		void set_temp(const double& new_t){
			//set the temperature variable used in channels
			T = new_t;
		}

	protected:
		//constants
		double nao;
		double cao;
		double ko;

		//buffer paramaters
		double BSRmax;
		double KmBSR;
		double BSLmax;
		double KmBSL;
		double cmdnmax;
		double kmcmdn;
		double trpnmax;
		double kmtrpn;
		double csqnmax;
		double kmcsqn;

		//CaMK paramaters
		double aCaMK;
		double bCaMK;
		double CaMKo;
		double KmCaM;
		double KmCaMK;

		//physical constants
		double R;
		double T;
		double F;

		//cell geometry
		double L;
		double rad;
		double vcell;
		double Ageo;
		double Acap;
		double vmyo;
		double vmito;
		double vsr;
		double vnsr;
		double vjsr;
		double vss;
	};
}

#endif