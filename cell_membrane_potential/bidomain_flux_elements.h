// Header file for elements that are used to apply prescribed flux
// boundary conditions to the Monodomain equations
#ifndef OOMPH_BIDOMAIN_FLUX_ELEMENTS_HEADER
#define OOMPH_BIDOMAIN_FLUX_ELEMENTS_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif

#include "bidomain_elements.h"

// oomph-lib includes
#include "../generic/Qelements.h"

namespace oomph
{

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////




//======================================================================
/// \short A class for elements that allow the imposition of an 
/// applied flux on the boundaries of Advection Diffusion elements.
/// The element geometry is obtained from the  FaceGeometry<ELEMENT> 
/// policy class.
//======================================================================
template <class ELEMENT>
class BidomainFluxElement : public virtual FaceGeometry<ELEMENT>, 
public virtual FaceElement
{
 
public:


 /// \short Function pointer to the prescribed-flux function fct(x,f(x)) -- 
 /// x is a Vector! 
 typedef void (*BidomainPrescribedFluxFctPt)
  (const Vector<double>& x, double& flux);


 /// \short Constructor, takes the pointer to the "bulk" element
 /// and the index of the face to be created
 BidomainFluxElement(FiniteElement* const &bulk_el_pt, 
                               const int &face_index);


 ///\short  Broken empty constructor
 BidomainFluxElement()
  {
   throw OomphLibError(
    "Don't call empty constructor for BidomainFluxElement",
    OOMPH_CURRENT_FUNCTION,
    OOMPH_EXCEPTION_LOCATION);
  }

 /// Broken copy constructor
 BidomainFluxElement(const BidomainFluxElement& dummy) 
  { 
   BrokenCopy::broken_copy("BidomainFluxElement");
  } 
 
 /// Broken assignment operator
 void operator=(const BidomainFluxElement&) 
  {
   BrokenCopy::broken_assign("BidomainFluxElement");
  }

 /// Access function for the prescribed-flux function pointer
 BidomainPrescribedFluxFctPt& intracellular_flux_fct_pt() {return Intracellular_Flux_fct_pt;}

 BidomainPrescribedFluxFctPt& extracellular_flux_fct_pt() {return Extracellular_Flux_fct_pt;}


 /// Add the element's contribution to its residual vector
 inline void fill_in_contribution_to_residuals(Vector<double> &residuals)
  {
   //Call the generic residuals function with flag set to 0
   //using a dummy matrix
   fill_in_generic_residual_contribution_bidomain_flux(
    residuals,GeneralisedElement::Dummy_matrix,0);
  }


 /// \short Add the element's contribution to its residual vector and 
 /// its Jacobian matrix
 inline void fill_in_contribution_to_jacobian(Vector<double> &residuals,
                                          DenseMatrix<double> &jacobian)
  {
   //Call the generic routine with the flag set to 1
   fill_in_generic_residual_contribution_bidomain_flux(residuals,jacobian,1);
  }

 /// Specify the value of nodal zeta from the face geometry
 /// \short The "global" intrinsic coordinate of the element when
 /// viewed as part of a geometric object should be given by
 /// the FaceElement representation, by default (needed to break
 /// indeterminacy if bulk element is SolidElement)
 double zeta_nodal(const unsigned &n, const unsigned &k,           
                   const unsigned &i) const 
 {return FaceElement::zeta_nodal(n,k,i);}     
 
 /// \short Output function -- forward to broken version in FiniteElement
 /// until somebody decides what exactly they want to plot here...
 void output(std::ostream &outfile) {FiniteElement::output(outfile);}

 /// \short Output function -- forward to broken version in FiniteElement
 /// until somebody decides what exactly they want to plot here...
 void output(std::ostream &outfile, const unsigned &nplot)
  {FiniteElement::output(outfile,nplot);}


protected:

 /// \short Function to compute the shape and test functions and to return 
 /// the Jacobian of mapping between local and global (Eulerian)
 /// coordinates
 inline double shape_and_test(const Vector<double> &s, Shape &psi, Shape &test)
  const
  {
   //Find number of nodes
   unsigned n_node = nnode();

   //Get the shape functions
   shape(s,psi);

   //Set the test functions to be the same as the shape functions
   for(unsigned i=0;i<n_node;i++) {test[i] = psi[i];}

   //Return the value of the jacobian
   return J_eulerian(s);
  }


 /// \short Function to compute the shape and test functions and to return 
 /// the Jacobian of mapping between local and global (Eulerian)
 /// coordinates
 inline double shape_and_test_at_knot(const unsigned &ipt,
                                      Shape &psi, Shape &test)
  const
  {
   //Find number of nodes
   unsigned n_node = nnode();

   //Get the shape functions
   shape_at_knot(ipt,psi);

   //Set the test functions to be the same as the shape functions
   for(unsigned i=0;i<n_node;i++) {test[i] = psi[i];}

   //Return the value of the jacobian
   return J_eulerian_at_knot(ipt);
  }



 /// \short Function to calculate the prescribed flux at a given spatial
 /// position
 void get_intracellular_flux(const Vector<double>& x, double& flux_i)
  {
   //If the function pointer is zero return zero
   if(Intracellular_Flux_fct_pt == 0)
    {
     flux=0.0;
    }
   //Otherwise call the function
   else
    {
     (*Intracellular_Flux_fct_pt)(x,flux);
    }
  }

  void get_extracellular_flux(const Vector<double>& x, double& flux_e)
  {
   //If the function pointer is zero return zero
   if(Extracellular_Flux_fct_pt == 0)
    {
     flux=0.0;
    }
   //Otherwise call the function
   else
    {
     (*Extracellular_Flux_fct_pt)(x,flux);
    }
  }

private:


 /// \short Add the element's contribution to its residual vector.
 /// flag=1(or 0): do (or don't) compute the Jacobian as well. 
 void fill_in_generic_residual_contribution_bidomain_flux(
  Vector<double> &residuals, DenseMatrix<double> &jacobian, 
  unsigned flag);
 
 
 /// Function pointer to the (global) prescribed-flux function
 BidomainPrescribedFluxFctPt Intracellular_Flux_fct_pt;
 BidomainPrescribedFluxFctPt Extracellular_Flux_fct_pt;

 /// The spatial dimension of the problem
 unsigned Dim;

 /// The index at which the unknown is stored at the nodes
 unsigned Vm_index_bidomain;
 unsigned Phie_index_bidomain;


}; 





///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////



//===========================================================================
/// \short Constructor, takes the pointer to the "bulk" element and the index
/// of the face to be created 
//===========================================================================
template<class ELEMENT>
BidomainFluxElement<ELEMENT>::
BidomainFluxElement(FiniteElement* const &bulk_el_pt, 
                              const int &face_index) : 
 FaceGeometry<ELEMENT>(), FaceElement()
{  
 // Let the bulk element build the FaceElement, i.e. setup the pointers 
 // to its nodes (by referring to the appropriate nodes in the bulk
 // element), etc.
 bulk_el_pt->build_face_element(face_index,this);
 
#ifdef PARANOID
 {
  //Check that the element is not a refineable 3d element
  ELEMENT* elem_pt = dynamic_cast<ELEMENT*>(bulk_el_pt);
  //If it's three-d
  if(elem_pt->dim()==3)
   {
    //Is it refineable
    RefineableElement* ref_el_pt=dynamic_cast<RefineableElement*>(elem_pt);
    if(ref_el_pt!=0)
     {
      if (this->has_hanging_nodes())
       {
        throw OomphLibError(
         "This flux element will not work correctly if nodes are hanging\n",
         OOMPH_CURRENT_FUNCTION,
         OOMPH_EXCEPTION_LOCATION);
       }
     }
   }
 }
#endif

 // Initialise the prescribed-flux function pointer to zero
 Flux_fct_pt = 0;
 
 // Extract the dimension of the problem from the dimension of 
 // the first node
 Dim = this->node_pt(0)->ndim();


 //Set up Vm_index_bidomain. Initialise to zero, which probably won't change
 //in most cases, oh well, the price we pay for generality
 Vm_index_bidomain = 0;
 Phie_index_bidomain = 0;
 
 //Cast to the appropriate MonodomainEquation so that we can
 //find the index at which the variable is stored
 //We assume that the dimension of the full problem is the same
 //as the dimension of the node, if this is not the case you will have
 //to write custom elements, sorry
 switch(Dim)
  {
   //One dimensional problem
  case 1:
  {
   BidomainEquations<1>* eqn_pt = 
    dynamic_cast<BidomainEquations<1>*>(bulk_el_pt);
   //If the cast has failed die
   if(eqn_pt==0)
    {
     std::string error_string =
      "Bulk element must inherit from BidomainEquations.";
     error_string += 
      "Nodes are one dimensional, but cannot cast the bulk element to\n";
     error_string += "BidomainEquations<1>\n.";
     error_string += 
      "If you desire this functionality, you must implement it yourself\n";
     
       throw OomphLibError(
        error_string,
        OOMPH_CURRENT_FUNCTION,
        OOMPH_EXCEPTION_LOCATION);
    }
   //Otherwise read out the value
   else
    {
     //Read the index from the (cast) bulk element
     Vm_index_bidomain = eqn_pt->vm_index_BaseCellMembranePotential();
     Phie_index_bidomain = eqn_pt->phie_index_Bidomain();
    }
  }
  break;
  
  //Two dimensional problem
  case 2:
  {
   BidomainEquations<2>* eqn_pt = 
    dynamic_cast<BidomainEquations<2>*>(bulk_el_pt);
   //If the cast has failed die
   if(eqn_pt==0)
    {
     std::string error_string =
      "Bulk element must inherit from BidomainEquations.";
     error_string += 
      "Nodes are two dimensional, but cannot cast the bulk element to\n";
     error_string += "BidomainEquations<2>\n.";
     error_string += 
      "If you desire this functionality, you must implement it yourself\n";
     
     throw OomphLibError(
      error_string,
      OOMPH_CURRENT_FUNCTION,
      OOMPH_EXCEPTION_LOCATION);
    }
   else
    {
     //Read the index from the (cast) bulk element.
     Vm_index_bidomain = eqn_pt->vm_index_BaseCellMembranePotential();
     Phie_index_bidomain = eqn_pt->phie_index_Bidomain();
    }
  }
  break;
  
  //Three dimensional problem
  case 3:
  {
   BidomainEquations<3>* eqn_pt = 
    dynamic_cast<BidomainEquations<3>*>(bulk_el_pt);
   //If the cast has failed die
   if(eqn_pt==0)
    {
     std::string error_string =
      "Bulk element must inherit from BidomainEquations.";
     error_string += 
      "Nodes are three dimensional, but cannot cast the bulk element to\n";
     error_string += "BidomainEquations<3>\n.";
     error_string += 
      "If you desire this functionality, you must implement it yourself\n";
     
     throw OomphLibError(
      error_string,
      OOMPH_CURRENT_FUNCTION,
      OOMPH_EXCEPTION_LOCATION);
     
    }
   else
    {
     //Read the index from the (cast) bulk element.
     Vm_index_bidomain = eqn_pt->vm_index_BaseCellMembranePotential();
     Phie_index_bidomain = eqn_pt->phie_index_Bidomain();
    }
  }
  break;
  
  //Any other case is an error
  default:
   std::ostringstream error_stream; 
   error_stream <<  "Dimension of node is " << Dim 
                << ". It should be 1,2, or 3!" << std::endl;
   
   throw OomphLibError(
    error_stream.str(),
    OOMPH_CURRENT_FUNCTION,
    OOMPH_EXCEPTION_LOCATION);
   break;
  }
}


//===========================================================================
/// Compute the element's residual vector and the (zero) Jacobian matrix.
//===========================================================================
template<class ELEMENT>
void BidomainFluxElement<ELEMENT>::
fill_in_generic_residual_contribution_bidomain_flux(
 Vector<double> &residuals, 
 DenseMatrix<double> &jacobian, 
 unsigned flag)
{
 //Find out how many nodes there are
 const unsigned n_node = nnode();
  
 //Set up memory for the shape and test functions
 Shape psif(n_node), testf(n_node);
 
 //Set the value of n_intpt
 const unsigned n_intpt = integral_pt()->nweight();
 
 //Set the Vector to hold local coordinates
 Vector<double> s(Dim-1);
 
 //Integers used to store the local equation number and local unknown
 //indices for the residuals and jacobians
 int local_eqn=0;

 // Locally cache the index at which the variable is stored
 const unsigned vm_index_bidomain = Vm_index_bidomain;
 const unsigned phie_index_bidomain = Phie_index_bidomain;


 //Loop over the integration points
 //--------------------------------
 for(unsigned ipt=0;ipt<n_intpt;ipt++)
  {
   //Assign values of s
   for(unsigned i=0;i<(Dim-1);i++) {s[i] = integral_pt()->knot(ipt,i);}
   
   //Get the integral weight
   double w = integral_pt()->weight(ipt);
   
   //Find the shape and test functions and return the Jacobian
   //of the mapping
   double J = shape_and_test(s,psif,testf);
   
   //Premultiply the weights and the Jacobian
   double W = w*J;
   
   //Need to find position to feed into flux function
   Vector<double> interpolated_x(Dim,0.0);
      
   //Calculate position
   for(unsigned l=0;l<n_node;l++) 
    {
     //Loop over coordinate directions
     for(unsigned i=0;i<Dim;i++)
      {
       interpolated_x[i] += nodal_position(l,i)*psif[l];
      }
    }
   
   //Get the imposed flux
   double intracellular_flux;
   get_intracellular_flux(interpolated_x,intracellular_flux);

   double extracellular_flux;
   get_extracellular_flux(interpolated_x,extracellular_flux);

   //Now add to the appropriate equations
   
   //Loop over the test functions
   for(unsigned l=0;l<n_node;l++)
    {
     //Set the local equation number
     local_eqn = nodal_local_eqn(l,vm_index_bidomain);
     /*IF it's not a boundary condition*/
     if(local_eqn >= 0)
      {
       //Add the prescribed flux terms
       residuals[local_eqn] += intracellular_flux*testf[l]*W;
         
       // Imposed traction doesn't depend upon the solution, 
       // --> the Jacobian is always zero, so no Jacobian
       // terms are required
      }

     //Set the local equation number
     local_eqn = nodal_local_eqn(l,phie_index_bidomain);
     /*IF it's not a boundary condition*/
     if(local_eqn >= 0)
      {
       //Add the prescribed flux terms
       residuals[local_eqn] += (intracellular_flux + extracellular_flux)*testf[l]*W;
         
       // Imposed traction doesn't depend upon the solution, 
       // --> the Jacobian is always zero, so no Jacobian
       // terms are required
      }
    }
  }
}





}

#endif


